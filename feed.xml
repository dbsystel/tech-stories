<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://jbake.org</link>
    <atom:link href="http://jbake.org/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Fri, 26 Jan 2024 09:14:13 +0000</pubDate>
    <lastBuildDate>Fri, 26 Jan 2024 09:14:13 +0000</lastBuildDate>

    
    <item>
      <title>Meine Reise durch die Evolution der Webentwicklung</title>
      <link>http://jbake.org/blog/2024/2024-01-25-Evolution-der-Webentwicklung.html</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2024/2024-01-25-Evolution-der-Webentwicklung.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_vom_code_zum_klick_meine_reise_durch_die_evolution_der_webentwicklung&quot;&gt;Vom Code zum Klick: Meine Reise durch die Evolution der Webentwicklung&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_zuerst_ein_paar_meilensteine_der_webentwicklung_tabellarisch_zusammengefasst&quot;&gt;Zuerst ein paar Meilensteine der Webentwicklung tabellarisch zusammengefasst:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_meine_ersten_erfahrungen_mit_dem_internet&quot;&gt;Meine ersten Erfahrungen mit dem Internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_wie_wurden_webseiten_2014_gebaut&quot;&gt;Wie wurden Webseiten 2014 gebaut?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_wie_ist_der_stand_heute&quot;&gt;Wie ist der Stand heute?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_wie_helfen_moderne_frontends_bei_der_performance&quot;&gt;Wie helfen moderne Frontends bei der Performance?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_hier_der_aufbau_eines_modernen_frontends_mit_bff_backend_for_frontend&quot;&gt;Hier der Aufbau eines modernen Frontends mit BFF (Backend for Frontend):&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_wie_baue_ich_frontends&quot;&gt;Wie baue ich Frontends?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_bevor_ich_mit_einem_neuen_projekt_anfange&quot;&gt;Bevor ich mit einem neuen Projekt anfange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_abschließend_ein_paar_wünsche_an_das_frontend_welches_ihr_baut&quot;&gt;Abschließend ein paar Wünsche an das Frontend, welches ihr baut:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vom_code_zum_klick_meine_reise_durch_die_evolution_der_webentwicklung&quot;&gt;Vom Code zum Klick: Meine Reise durch die Evolution der Webentwicklung&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In diesem persönlichen Rückblick tauchen wir ein in die faszinierende Welt der Webentwicklung – von den frühen Tagen des manuellen Codings bis hin zu den modernen Technologien, die heute den Standard setzen. Begleitet mich auf meiner Reise durch die Zeit, in der sich HTML, CSS und JavaScript von Grund auf verändert haben und entdeckt, wie sich die Herausforderungen und Lösungen in der Webentwicklung im Laufe der Jahre gewandelt haben. Von den ersten Schritten mit einfachen Tools bis hin zu den komplexen Frameworks und Methoden von heute – dies ist eine Geschichte von Innovation, Lernen und ständiger Weiterentwicklung.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_zuerst_ein_paar_meilensteine_der_webentwicklung_tabellarisch_zusammengefasst&quot;&gt;Zuerst ein paar Meilensteine der Webentwicklung tabellarisch zusammengefasst:&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;1991 erste Webseite mit HTML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1995 PHP und JavaScript&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1996 CSS
------------- bis hierhin kaum automatisiertes Deployment möglich (z. B. über FTP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2000 SVN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2003 Wordpress (Joomla/Typo3 etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2005 GIT
------------- Versionierung&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2006 jQuery und AWS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2008 Static Site Generators (SSG)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2009 Node.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2010 NPM und AngularJS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2011 Bootstrap CSS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2012 Webpack, TypeScript&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2013 Docker, &lt;a href=&quot;https://react.dev&quot;&gt;React&lt;/a&gt; und Server Side Rendering
------------- automatisierte und idempotente Deployments möglich&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2014 Vue.js, CSS-in-JS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015 PWAs (100% seit 2022)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2016 &lt;a href=&quot;https://nextjs.org&quot;&gt;Next.js&lt;/a&gt;, Angular (4+)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020 &lt;a href=&quot;https://vitejs.dev&quot;&gt;Vite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2022 Generatoren für Frontend/Backend Kombinationen &lt;a href=&quot;https://refine.new&quot;&gt;refine.new&lt;/a&gt;, &lt;a href=&quot;https://redwoodjs.com&quot;&gt;RedwoodJS&lt;/a&gt;, &lt;a href=&quot;https://blitzjs.com&quot;&gt;Blitz.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2023 Ende des Internet Explorers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2023 React Server Components&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mehr Details und ausführlichere Infos gibt es unter anderem auf:
- &lt;a href=&quot;https://designmodo.com/history-website-building/&quot;&gt;designmodo.com: The Short History of Website Building&lt;/a&gt;
- &lt;a href=&quot;https://dev.to/snickdx/a-brief-history-of-the-web-part-4-194b&quot;&gt;Nicholas Mendez: A &quot;Brief&quot; History of the Web Part 4&lt;/a&gt;
- &lt;a href=&quot;https://www.viget.com/articles/what-even-are-react-server-components/?token=PFnI6MT715nmYK0BZzQEiRsYQ7w_x5SP&quot;&gt;Nick Telsan: What Even Are React Server Components&lt;/a&gt;
- &lt;a href=&quot;https://jessedit.tech/articles/react-server-components/1-background/?ck_subscriber_id=1652261910&quot;&gt;Jesse Pence: React Server Components&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_meine_ersten_erfahrungen_mit_dem_internet&quot;&gt;Meine ersten Erfahrungen mit dem Internet&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wenn ich mich an die Anfänge meiner Tätigkeit erinnere, haben wir HTML, CSS, PHP und jQuery mit BBedit selbst geschrieben, gespeichert und manuell per FTP auf Server hochgeladen. Das Beste, was es damals gab, war das Programm Transmit, mit dem einzelne Ordner synchronisiert werden konnten. Alles war sehr fehleranfällig, ohne Versionierung und daher schwer bis gar nicht testbar – nur manuell. jQuery-Plugins wurden mit Abhängigkeiten zu unterschiedlichen jQuery-Versionen benutzt, die nicht unbedingt kompatibel waren. Man musste jedes Mal hoffen, dass die Webseite noch funktionierte, nachdem man Code hinzugefügt hatte. Was mich immer am meisten geärgert hat, war ein Flackern, sobald das JavaScript geladen wurde und über das PHP-gerenderte HTML noch extra DOM-Elemente legte.
Die folgenden Probleme sind meiner Meinung nach die größten beim klassisch gerenderten Web: Wann ist der DOM fertig, wann ist das JS geladen und wird ausgeführt, wer hat bei intensiven Seiten „das Sagen“ – das Frontend oder das Backend (Routing, Views)?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_wie_wurden_webseiten_2014_gebaut&quot;&gt;Wie wurden Webseiten 2014 gebaut?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nach meinem Studium habe ich in Hamburg bei AboutYou in einer IT-Agentur gearbeitet, die nach Scrum ihren Arbeitszyklus gestaltet und schon damals diverse Tools zum Bauen des Frontends benutzt hat. Da die Tools alle am Anfang ihres Lebenszyklus waren, mussten mindestens drei Package-Manager und Erweiterungen installiert werden, bevor die Webseite gebaut werden konnte. Gebaut? Ja, das war die Zeit, in der Grunt und Webpack eine moderne und strukturierte Frontendentwicklung ermöglicht haben. Vorbei waren die Zeiten mit unterschiedlichen Encodings und Zeilenumbrüchen. Was für ein Gefühl es war, lokal einen Befehl in der Kommandozeile aufzurufen und die zu entwickelnde Webseite auf dem eigenen Gerät zu sehen – heute Standard. Hier lernte ich zum ersten Mal Package-Manager und Versionierung kennen. Und noch ein Thema kam auf: IDEs für Webentwicklung. Bisher war der beste Freund der Inspektor im Browser, eine lokale, beim Entwickler stattfindende Überprüfung oder Unterstützung konnten bis dahin nur die „richtigen“ Programmiersprachen und die dazugehörigen teuren IDEs (z. B. IntelliJ) bieten. Mit Atom gab es eine IDE, die schnell startete, sich nur um Websprachen kümmerte und über Plugins erweiterbar war. Jetzt gab es Autovervollständigung für HTML/JS/CSS und über Webpack konnten alle Dateien optimiert, komprimiert und kombiniert werden.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_wie_ist_der_stand_heute&quot;&gt;Wie ist der Stand heute?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sehr gut! Viele Probleme der Vergangenheit sind verschwunden (Internet Explorer existiert nicht mehr, schlechte Kompatibilität der Browser) und es gibt eine Reihe von Möglichkeiten, Frontends mit Frameworks zu bauen, die alle ihre Vor- und kleinen Nachteile haben. Z. B. hat sich Visual Studio Code als Nachfolger von Atom zum (kostenlosen) Standard für Webentwicklung mit noch mehr Möglichkeiten zur generellen Verbesserung gemausert. Frontend-Frameworks gibt es viele (und es kommen immer mehr dazu) – durchgesetzt haben sich aktuell React, Angular, Vue.js und Svelte.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_wie_helfen_moderne_frontends_bei_der_performance&quot;&gt;Wie helfen moderne Frontends bei der Performance?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Schauen wir uns hierzu den Ablauf einer klassischen Webseite an: Ein Endgerät ruft die URL unserer Seite auf. Der Server antwortet je nach Session/Cookie/Authentication mit einer Login-Seite oder dem gerendertem HTML eines PHP-Skripts. Evtl. wurde der Client auf eine andere URL umgeleitet. Das HTML wird vom Browser interpretiert und JS/CSS/Bilder werden nachgeladen. Das CSS sorgt für das Styling der Seite. Das ausgelieferte JavaScript wird interpretiert, verändert das DOM und lädt neue Daten nach, und das wiederholt sich, wie hier beschrieben. Alle Schritte benötigen Zeit und führen zu einer mehrsekündigen Wartezeit, bis die Webseite benutzt werden kann.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hier_der_aufbau_eines_modernen_frontends_mit_bff_backend_for_frontend&quot;&gt;Hier der Aufbau eines modernen Frontends mit BFF (Backend for Frontend):&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Client fragt den Server an und erhält HTML, JS und CSS sowie den Login-Status vom Backend, und zwar so aufbereitet, dass der Browser es direkt darstellen kann, ohne weitere Schleifen zu drehen. Weitere Inhalte werden z. B. als JSON nachgeladen und im Browser mit JavaScript gerendert. Zusätzlich gibt es für alle JS-Frameworks Bundler, die beim Bauen der auszuliefernden Dateien diese optimal aufbereiten, sodass der User innerhalb kürzester Zeit mit dem Frontend interagieren kann.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_wie_baue_ich_frontends&quot;&gt;Wie baue ich Frontends?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mein Lieblings-Javascript-Framework ist React. Eine gute Übersicht über andere JS-Frameworks und was sie unterscheidet, findet ihr z. B. auf themer.dev[&lt;a href=&quot;https://themer.dev/blog/the-single-most-important-factor-that-differentiates-front-end-frameworks&quot; class=&quot;bare&quot;&gt;https://themer.dev/blog/the-single-most-important-factor-that-differentiates-front-end-frameworks&lt;/a&gt;].
Von dieser Seite kommt folgendes Zitat: „Reacts change detection paradigm is straightforward: the application state is maintained inside the framework (with APIs exposed to the developer for updating it) so that React knows when to re-render.“ Und was heißt das jetzt? Nicht mehr der Browser oder das Backend entscheiden, auf welcher URL was passiert, sondern das Frontend. Und wenn im Frontend eine Aktion ausgelöst wird, entscheidet auch das Frontend, was passiert. Das heißt nicht, dass es kein Backend gibt oder dass z. B. Validierung nur auf der Frontendseite passiert. Sicherheit im Web sollte der wichtigste Aspekt sein.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_bevor_ich_mit_einem_neuen_projekt_anfange&quot;&gt;Bevor ich mit einem neuen Projekt anfange&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Was sich für mich als Erfolgsrezept herausgestellt hat: Sich am Anfang eines Neu- oder Umbaus einer Seite viel Zeit nehmen, um passende Libraries/Frameworks zu finden, die einem das Leben erleichtern und diese zu benutzen (UI Components, Accessibility, Icons, etc.). Am besten auf bekannte Frameworks setzen, die regelmäßig aktualisiert/gewartet werden.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_abschließend_ein_paar_wünsche_an_das_frontend_welches_ihr_baut&quot;&gt;Abschließend ein paar Wünsche an das Frontend, welches ihr baut:&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Macht die Webseite responsive (Probiert eure Webseite mit unterschiedlichen Geräten in unterschiedlichen Auflösungen aus)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Räumt euren Header-Bereich auf und nutzt z. B. &lt;a href=&quot;https://realfavicongenerator.net&quot;&gt;ealfavicongenerator.net&lt;/a&gt;, um für alle ein schönes Favicon zu zaubern&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nutzt Komponenten die Accessability mit eingebaut haben (z. B. &lt;a href=&quot;https://blueprintjs.com&quot;&gt;Blueprint&lt;/a&gt;, &lt;a href=&quot;https://mantine.dev&quot;&gt;Mantine&lt;/a&gt; oder &lt;a href=&quot;https://rsuitejs.com&quot;&gt;React Suite&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Macht den Google Lighthouse Test und behebt die wichtigsten Probleme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Macht nur eine PWA, wenn offline-Inhalte essenziell sind oder ihr eine richtige App ausliefert&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Erlaubt das Zoomen eurer Seiten, sowie das Kopieren und Einfügen von Text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wenn etwas sich wie ein link verhält, dann lasst die User Link-Aktionen machen (z. B. speichern unter)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Macht Hover-Styles für Links&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wenn sich die Gui geändert hat, nachdem geklickt wurde, ändert die URL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das war die Reise durch 20 Jahre Webentwicklung – ich bin sehr gespannt, was in 20 Jahren im Web alles möglich ist.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Accessibility in Angular</title>
      <link>http://jbake.org/blog/2024/2024-01-16-Accessibility-in-Angular.html</link>
      <pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2024/2024-01-16-Accessibility-in-Angular.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_accessibility_in_angular_angulars_features_for_a_better_and_more_inclusive_web&quot;&gt;Accessibility in Angular – Angulars features for a better and more inclusive web&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_demos&quot;&gt;Demos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_accessibility_in_angular_angulars_features_for_a_better_and_more_inclusive_web&quot;&gt;Accessibility in Angular – Angulars features for a better and more inclusive web&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Angular Framework brings us some built-in features to help in creating accessible components and applications by wrapping common best practices and techniques.
In this talk at the Angular Berlin Meetup, Danny presented these concepts and features.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Agular Meetup Berlin, hosted at &lt;a href=&quot;https://www.meetup.com/de-DE/angular-meetup-berlin&quot;&gt;Angular Berlin Meetup&lt;/a&gt; takes place regularly at DB Systel in Berlin.
On January 16th 2024, Danny delved deeper into the &lt;a href=&quot;https://angular.dev/&quot;&gt;Angular&lt;/a&gt; Framework and examining its features that aid in enhancing overall accessibility. Furthermore, he guided attendees through the use of the &lt;a href=&quot;https://material.angular.io/cdk/&quot;&gt;Angular CDK&lt;/a&gt; which provides additional tools helping us to improve the accessibility of our application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;speakerdeck-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/429de7064f324af1b55ed639b40ee517&quot; title=&quot;Accessibility in Angular – Angulars features for a better and more inclusive web&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_demos&quot;&gt;Demos&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/d-koppenhagen/angular-a11y-demo&quot;&gt;Angular a11y Demo Repository&lt;/a&gt; with source code related to the slides&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Fahrplankonstruktion</title>
      <link>http://jbake.org/blog/2023/2023-12-21-vollautomatisch-konstruierter-Fahrplan.html</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-12-21-vollautomatisch-konstruierter-Fahrplan.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_von_der_vision_eines_vollautomatisch_konstruierten_fahrplans&quot;&gt;Von der Vision eines vollautomatisch konstruierten Fahrplans&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_von_der_vision_eines_vollautomatisch_konstruierten_fahrplans&quot;&gt;Von der Vision eines vollautomatisch konstruierten Fahrplans&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wie mit Digitalisierung der Prozesse und agiler Software-Entwicklung der Fahrplan unter dem &quot;rollenden Rad&quot; sukzessive auf die Digitale Schiene gesetzt und gleichzeitig eine Kapazitätssteigerung erreicht wird.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jede Zugfahrt in Deutschland braucht einen Fahrplan.
Das sind bis zu 50.000 Zugfahrten mit Fahrplänen pro Tag.
Doch wo kommen diese her? Die steigende Verkehrsnachfrage führt auf der einen Seite zu höheren Kapazitätsbedarfen und Auslastung der Schieneninfrastruktur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Auf der anderen Seite wird die verfügbare Kapazität während der Bau- und Modernisierungsaktivitäten der Schieneninfrastruktur und der Leit- und Sicherungstechnik während der Maßnahmen reduziert.
Zur frühzeitigen Identifikation, Vermeidung und Handhabung von möglichen Kapazitätsengpässen sind die IT und die weitere Digitalisierung der Prozesse gefordert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Durch die Einführung digitaler Prozesse entwickeln wir uns weg von der einer manuellen Fahrplankonstruktion hin zu einer weitestgehend vollständig automatisierten Fahrplankonstruktion und Kapazitätsmanagement,
so dass die zukünftig steigenden Verkehrsbedarfe auf der Schiene weiterhin bedient werden können. Hierzu sind wir vor 3 Jahren gestartet, die monolithischen Bestandssysteme sukzessive durch modulare Services mit einer flexiblen, integrierten Plattform abzulösen und zu automatisieren.
Damit verbunden ist die Neugestaltung und Automatisierung von Abläufen und Prozessschritten, sowie eine Konsolidierung der Datenhaltung und Informationsflüsse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die agile Software-Entwicklung bietet eine höhere Flexibilität und Reaktionsschnelligkeit auf Kundenwünsche und neue Anforderungen.
Wir arbeiten iterativ und sind im ständigen Austausch zu unseren Stakeholdern. Dadurch werden Teillieferungen in regelmäßigen Abständen gewährleistet, um so der großen Vision stückweise näher zu kommen.
Die Herausforderung ist, mit über 600 Experten in crossfunktionalen, agilen Teams synchronisiert neue Abläufen, automatisierte Prozessschritte und flexibel kombinierbaren und modularen Services zu konzipieren, entwickeln und unter dem &quot;rollenden Rad&quot; sukzessive in Produktion zu bringen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Als DB Netz sind wir in Deutschland eines der größten Unternehmen, die einen signifikanten Anteil der IT-Entwicklung nach SAFe® 6.0 gestalten.
Unsere Teams arbeiten mit modernsten Standards in der Cloud, setzen auf eine sehr hohe Automatisierung im Lebenszyklus der Softwareentwicklung und übernehmen eine Ende-zu-Ende Verantwortung für ihre entwickelten Artefakte.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dbsystel.de/resource/blob/12597952/7bb044041329258cda34e653b2425adb/Von-der-Vision-eines-vollautomatisch-konstruierten-Fahrplans-data.pdf&quot;&gt;download&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>http://jbake.org/blog/2023/2023-12-21-postgreSQL.html</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-12-21-postgreSQL.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_ein_jahr_postgresql_das_leben_danach&quot;&gt;Ein Jahr PostgreSQL – Das Leben danach&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ein_jahr_postgresql_das_leben_danach&quot;&gt;Ein Jahr PostgreSQL – Das Leben danach&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dieser Vortrag ist ein Jahr nach dem Entschluss entstanden, einen neuen Job anzunehmen und mich raus aus meiner Oracle-Blase und rein in die &quot;neue&quot; Welt der PostgreSQL-Datenbankentwicklung zu begeben.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Gedanke damals war: &quot;SQL ist SQL und ich werde mich schon schnell zurechtfinden. Es bleibt ja eine Relationale Datenbank&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dieser Vortrag soll eine kleine Zusammenfassung sein über:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Einige WTF-Momente: Der Teufel liegt im Detail und welche Unterschiede da wirklich auf einen Oracle-Datenbankentwickler warten, war mir vorher nicht bewusst.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Das schöne aus beiden Welten: Sowohl Oracle als auch PostgreSQL haben schöne Seiten. Es ist von Vorteil, beide Systeme ein bisschen genauer zu kennen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sonstige Erfahrungen und Eindrücke, die ich nach einem Jahr im PostgreSQL-Ökosystem so beobachtet habe. Ich konzentriere mich dabei auf den Bereich SQL (z. B. analytic functions oder die Behandlung von NULL values) und habe aber auch ein paar &quot;admin-nahe&quot; bzw. theoretische Unterschiede, die ich aufzeigen möchte (z. B. Tuning-Werkzeuge und MVCC).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nach dem Vortrag sollte klarer sein, mit welchen Fallstricken man beim Umstieg von Oracle auf PostgreSQL rechnen sollte.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dbsystel.de/resource/blob/12597872/776fc8f4ab1b2bb699d72ceb3f157538/IT-Tage-Ein-Jahr-PostgreSQL-Das-Leben-danach-data.pdf&quot;&gt;download&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>AI in Software Design</title>
      <link>http://jbake.org/blog/2023/2023-11-29-AI-in-Software-Design.html</link>
      <pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-11-29-AI-in-Software-Design.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_using_ai_in_software_design_how_chatgpt_can_help_with_creating_a_solution_architecture&quot;&gt;Using AI in Software Design: How ChatGPT Can Help With Creating a Solution Architecture&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_using_ai_in_software_design_how_chatgpt_can_help_with_creating_a_solution_architecture&quot;&gt;Using AI in Software Design: How ChatGPT Can Help With Creating a Solution Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Artificial intelligence, or AI, is becoming a big part of our lives. One type of AI is Large Language Models (LLMs), like chatGPT. At the &lt;a href=&quot;https://conferences.isaqb.org/software-architecture-gathering/program-2023/#using-ai-in-software-design-how-chatgpt-can-help-with-creating-a-solution-architecture&quot;&gt;iSAQB Software Architecture Gathering&lt;/a&gt;, I showed how chatGPT can help with complex tasks in software design, such as the tasks in the iSAQB Advanced Exam.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We delved into the intricacies of conversing with chatGPT, illustrating the strategies needed to generate productive prompts and effectively utilize the model as a sparring partner. The talk wexemplified these concepts by taking the audience on a step-by-step journey through the process of tackling the iSAQB Advanced Example Exam, utilizing chatGPT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We demonstrated how to prepare for a chat session with chatGPT, how to generate robust prompts, and how to manage the chat for optimal outcomes. We aimed to highlight the model’s capabilities as an interactive tool that can provide valuable insights and streamline the process of developing software architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether you are a seasoned architect or a novice in the field, this presentation will equip you with novel techniques to navigate the challenging landscape of software architecture with the assistance of AI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dbsystel/tech-stories/discussions/10&quot;&gt;Discuss this topic with us on Github!&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_references&quot;&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rdmueller.github.io/chatGPT-architecture/&quot;&gt;Full HTML Chat Protocol and generated Solution as PDF&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/&quot;&gt;ChatGPT Prompt Engineering for Developers - DeepLearning.AI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.heise.de/hintergrund/Softwarearchitektur-KI-wird-unsere-Faehigkeiten-ergaenzen-nicht-ersetzen-9339113.html&quot;&gt;Softwarearchitektur: &quot;KI wird unsere Fähigkeiten ergänzen&amp;#44; nicht ersetzen&quot;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.heise.de/blog/KI-in-der-Softwareentwicklung-Ueberschaetzt-9336902.html&quot;&gt;KI in der Softwareentwicklung: Überschätzt | heise online&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://embarc-downloads.s3.eu-central-1.amazonaws.com/folien/st/2023/LLMs+und+Architektur-komprimiert.pdf&quot;&gt;Stefan Toth: Architektur in Zeiten von KI und LLMs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;speakerdeck-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/b0ced25885bd464fa9c5210b9a674e33&quot; title=&quot;Speakerdeck Player&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>A11y: EAA, BFSG, WCAG, WAI, ARIA, WTF? – it's for the people stupid!</title>
      <link>http://jbake.org/blog/2023/2023-11-20-einfuehrung-barrierefreiheit-web.html</link>
      <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-11-20-einfuehrung-barrierefreiheit-web.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_a11y_eaa_bfsg_wcag_wai_aria_wtf_its_for_the_people_stupid&quot;&gt;A11y: EAA, BFSG, WCAG, WAI, ARIA, WTF? – it&amp;#8217;s for the people stupid!&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_referenzen&quot;&gt;Referenzen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a11y_eaa_bfsg_wcag_wai_aria_wtf_its_for_the_people_stupid&quot;&gt;A11y: EAA, BFSG, WCAG, WAI, ARIA, WTF? – it&amp;#8217;s for the people stupid!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Barrierefreiheit ist ein verstaubtes und unwichtiges Thema für Behördensoftware?
Ganz im Gegenteil:
Accessibility betrifft uns täglich und immer, wenn wir Software verwenden.
Es ist an uns, diese umzusetzen.
In unserem Talk von der W-JAX am 07.11.2023 zeigen wir euch, wie ihr eure Webanwendungen von Beginn an mit einfachen Mitteln zu einem hohen Grad barrierefrei gestaltet und entwickelt.
Wir stellen euch effektive Methoden und Tools vor, die euch bei der Umsetzung und Prüfung in hohem Maße unterstützen.
Wir gehen darauf ein, welchen Einfluss Barrierefreiheit auf eure Frontend-Architekturen hat und welche Aspekte hier zu beachten sind.
Dabei beten wir nicht die einzelnen WCAG-Kriterien herunter – vielmehr geben wir euch eine praktische Einführung in das Thema Barrierefreiheit im Web und welche Kniffe und Fallstricke zu beachten sind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;speakerdeck-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/1801a779e99648f8b6b4beaa66fb0572&quot; title=&quot;A11y: EAA, BFSG, WCAG, WAI, ARIA, WTF? – it’s for the people stupid!&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_referenzen&quot;&gt;Referenzen&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://freesvg.org/download/178261&quot;&gt;Bild von Bill Clinton&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:W3C_icon.svg&quot;&gt;W3C Logo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Accessibility.svg&quot;&gt;Grafik &quot;human&quot;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Conway’s Law</title>
      <link>http://jbake.org/blog/2023/2023-11-20-conways-law.html</link>
      <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-11-20-conways-law.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_conways_law_in_real_life_why_organizational_development_and_software_engineering_have_to_go_hand_in_hand&quot;&gt;Conway’s Law in real life - why organizational development and software engineering have to go hand in hand.&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conways_law_in_real_life_why_organizational_development_and_software_engineering_have_to_go_hand_in_hand&quot;&gt;Conway’s Law in real life - why organizational development and software engineering have to go hand in hand.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conway’s Law inevitably connects the architecture of an software system with the responsible delivery organization.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, persons responsible for organizational development and architects of software systems often work in separation – especially in large enterprises.
What are the negative effects of this separation and what can we do about it?
In this talk Dr. Martin Strunk presents “real world examples” of the impact that arising from the ignorance of Conway`s law by decision makers.
He will also propose ways, in which companies might overcome and mitigate these problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Teams as first-class citizens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design comes first, then comes the participation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don’t rely on emergence to solve structural problems&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;speakerdeck-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/ef23e5bd534243f0a14ea30bb8760344&quot; title=&quot;Conway’s Law in real life&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Prompt-Engineering</title>
      <link>http://jbake.org/blog/2023/2023-11-08-prompt-engineering.html</link>
      <pubDate>Wed, 8 Nov 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-11-08-prompt-engineering.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_die_faszinierende_welt_des_prompt_engineerings&quot;&gt;Die faszinierende Welt des Prompt-Engineerings&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_referenzen&quot;&gt;Referenzen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_die_faszinierende_welt_des_prompt_engineerings&quot;&gt;Die faszinierende Welt des Prompt-Engineerings&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im Zentrum meines jüngsten Vortrags stand das Prompt-Engineering, ein Schlüsselelement im Umgang mit fortschrittlichen Sprachmodellen wie GPT-3 und GPT-4.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Prompt-Engineering ermöglicht es Entwicklern, genaue und nuancierte Antworten von KI-Modellen zu erhalten und das Potenzial der KI voll auszuschöpfen.
Wir tauchten tief in die Unterschiede zwischen GPT-3 und GPT-4 ein,
erkundeten die Komplexität neuronaler Netze und die Bedeutung der Multi-Modalität in der heutigen KI-Landschaft.
Ein besonderes Augenmerk legten wir auf die Kunst des Primings und der Kontextualisierung von Prompts,
die die Effektivität und Präzision der KI-Interaktionen erheblich steigern können.
Neben theoretischen Überlegungen werden reale Anwendungsfälle diskutiert, die das Potenzial von Prompt-Engineering veranschaulichen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;speakerdeck-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/f9d4a4977c4d4cc2a055a5f1687e5e56&quot; title=&quot;Spock and AsciiDoc - ein perfektes Paar&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_referenzen&quot;&gt;Referenzen&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.golem.de/news/security-bsi-sieht-ki-als-sicherheitsrisiko-2311-179043.html&quot;&gt;Golem.de: BSI sieht KI als Sicherhitsrisiko&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/TheHiredAI/status/1716485469079257282&quot;&gt;Twitter: The Hired AI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@sreedevr/chatgpt-architecture-explained-7fc0cbb7426c&quot;&gt;Medium: ChatGPT Architecture Explained by Sreedev R&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nature.com/articles/s41598-023-45837-2&quot;&gt;Scientific Reports: Comparative performance of humans versus GPT-4.0 and GPT-3.5&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/GPT-4&quot;&gt;GPT-4: Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.faz.net/pro/d-economy/prompt-der-woche/chatgpt-welche-einstellungen-bei-der-nutzung-helfen-19278230.html&quot;&gt;FAZ.net: ChatGPT: Welche Einstellungen bei der Nutzung helfen&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://chat.openai.com/share/eeb03d9d-8302-495e-be5d-e817cb7385ff&quot;&gt;OpenAI Chat: Beispiel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://chat.openai.com/share/3513ff43-fe92-4ebc-9e9b-1c2ca090ce1d&quot;&gt;OpenAI: Verbesserung der docToolchain Dokumentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/&quot;&gt;DeepLearning.AI: ChatGPT Prompt Engineering for Developers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.heise.de/hintergrund/Softwarearchitektur-KI-wird-unsere-Faehigkeiten-ergaenzen-nicht-ersetzen-9339113.html&quot;&gt;Heise Online: Softwarearchitektur: &quot;KI wird unsere Fähigkeiten ergänzen, nicht ersetzen&quot;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.heise.de/blog/KI-in-der-Softwareentwicklung-Ueberschaetzt-9336902.html&quot;&gt;Heise Online: KI in der Softwareentwicklung: Überschätzt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://chat.openai.com/share/09fddcd1-6a71-49c1-bf27-a9ff5f40dace&quot;&gt;OpenAI Chat: Beispiel 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://embarc-downloads.s3.eu-central-1.amazonaws.com/folien/st/2023/LLMs+und+Architektur-komprimiert.pdf&quot;&gt;Stefan Toth: Architektur
in Zeiten von
KI und LLMs
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Migrate Vue 2 to Vue 3</title>
      <link>http://jbake.org/blog/2023/2023-08-21-vue2-vue3-migration.html</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-08-21-vue2-vue3-migration.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_how_we_migrated_our_vue_2_enterprise_project_to_vue_3&quot;&gt;How we migrated our Vue 2 enterprise project to Vue 3&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_about_me_and_my_team&quot;&gt;About me and my Team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_where_we_started&quot;&gt;Where we started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_preparations&quot;&gt;Preparations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_migrations_before_the_migration&quot;&gt;Migrations before the migration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_finally_migrate_to_vue_3&quot;&gt;Finally: Migrate to Vue 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_post_migration_steps&quot;&gt;Post-Migration-Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_we_migrated_our_vue_2_enterprise_project_to_vue_3&quot;&gt;How we migrated our Vue 2 enterprise project to Vue 3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s been a while:
Since the 2nd February 2022, Vue 3 became the new default for Vue.js apps.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s done! Vue 3 is now the default version and the brand new &lt;a href=&quot;http://vuejs.org&quot; class=&quot;bare&quot;&gt;http://vuejs.org&lt;/a&gt; is live! More details in the blog post in case you missed it:
&lt;a href=&quot;https://blog.vuejs.org/posts/vue-3-as-the-new-default.html&quot; class=&quot;bare&quot;&gt;https://blog.vuejs.org/posts/vue-3-as-the-new-default.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://twitter.com/vuejs/status/1490592213184573441?s=20&amp;amp;t=sXiVzjkn_9nfgrYgrBK8SQ&quot;&gt;Tweet from @vuejs on Twitter&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was a long journey to the final default release of Vue 3 since the first version published on 18th September 2020.
But: even if Vue 3 isn&amp;#8217;t a new thing anymore, there are still a lot of Vue 2 apps which haven&amp;#8217;t been migrated yet.
The migration can be quite heavy since in practice it&amp;#8217;s much more than only following the migration guide.
Projects usually rely also on 3rd-party dependencies which are maybe not available for Vue 3 or not maintained anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post I will give you an insight into how my team mastered the migration and what pitfalls we faced.
I will describe how we planned and migrated our whole Vue 2 codebase to Vue 3 using Pinia as Store-Solution, Vite for our build environment and Vitest for fast unit test executions.
The focus of this article is not to provide a very detailed step-by-step migration guide.
I will focus about what things you should keep in mind, what you can already do before starting the migration and about some pitfalls we pointed out.
However, I will provide you links to more detailed blog posts about specific topics.
Please keep in mind, that the way we solved the migration won&amp;#8217;t probably fit to your very specific setup for 100%, but you can check what parts seem to be good for you and your team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Vue 2 EOL:&lt;/strong&gt; Please note, that the Vue 2 support will end on December 31st, 2023.
This means there will be no fixes and features provided anymore (unless you are &lt;a href=&quot;https://v2.vuejs.org/lts/&quot;&gt;actively extending the support&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_about_me_and_my_team&quot;&gt;About me and my Team&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To give you a high level overview about our context, I would just like to say a few short words about myself and my team.
I am working at &lt;a href=&quot;https://www.dbsystel.de/dbsystel-en&quot;&gt;DB Systel GmbH&lt;/a&gt;, in a DevOps Team building a Business-to-Government (B2G) solution together with our partner &lt;a href=&quot;https://www.deutschebahnconnect.com&quot;&gt;Deutsche Bahn Connect GmbH&lt;/a&gt; named &lt;a href=&quot;https://www.deutschebahnconnect.com/en/products/curbside-management&quot;&gt;&lt;strong&gt;&lt;em&gt;DB Curbside Management&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;.
Our product focuses on helping cities and councils to effectively manage shared mobility offerings and their jurisdictions dynamically.
They will be able to get insights about statistics, violations of agreements with the mobility providers to regulate a fair and steady distribution of all the different shared mobility vehicles across managed area.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_where_we_started&quot;&gt;Where we started&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My team added the migration to Vue 3 with the new default setup and tools using &lt;a href=&quot;https://vitejs.dev&quot;&gt;Vite&lt;/a&gt;, &lt;a href=&quot;https://pinia.vuejs.org&quot;&gt;Pinia&lt;/a&gt; and &lt;a href=&quot;https://vitest.dev&quot;&gt;Vitest&lt;/a&gt; to our backlog many months ago, but the switch to Vue 3 as default gave us another push for facing the migration.
We realized pretty fast, that a &lt;em&gt;big-bang&lt;/em&gt; migration wouldn&amp;#8217;t be possible for us, since it will block us releasing new features for quite a long time.
Our codebase contained already ~200 Vue 2 components using the old-fashioned Options API as well as a huge Vuex Store and some libraries that aren&amp;#8217;t compatible with Vue 3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_preparations&quot;&gt;Preparations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start with the preparation of your team and questions you should answer yourself before starting the migration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first thing you should do is to get comfy with Vue 3, and you should learn about the differences compared to Vue 2 and the options you have.
You can set up a Vue 3 playground app locally and explore yourself the new setup and components.
To know what things will change when starting the migration, I would recommend you the read the following articles in advance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Official Vue 2 to Vue 3 &lt;a href=&quot;https://v3-migration.vuejs.org&quot;&gt;Migration Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blogpost: &lt;a href=&quot;https://crisp.chat/blog/vuejs-migration&quot;&gt;&quot;Vue.js: How to Migrate a large project from Vue 2 to Vue 3&quot;&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/baptistejamin&quot;&gt;Baptiste Jamin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Official Vue 3 notes about the &lt;a href=&quot;https://vuejs.org/guide/extras/composition-api-faq.html#what-is-composition-api&quot;&gt;Composition API&lt;/a&gt; and the relationship / differences compared to the Options API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vue Master Blog-Series by Andy Li &lt;a href=&quot;https://www.vuemastery.com/blog/vue-3-migration-build&quot;&gt;Part 1&lt;/a&gt; | &lt;a href=&quot;https://www.vuemastery.com/blog/migration/&quot;&gt;Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Free Vue Mastery Video Course &lt;a href=&quot;https://www.vuemastery.com/courses/from-vue2-to-vue3/from-vue-2-to-vue-3&quot;&gt;&quot;From Vue 2 to Vue 3&quot;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_update_to_the_latest_minor_vue_2_version&quot;&gt;Update to the latest minor Vue 2 version&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My first advice is to keep your current app as up-to-date as possible.
Especially when your Vue version is below &lt;code&gt;2.7.x&lt;/code&gt;, I would recommend you to update it.
With Vue &lt;code&gt;2.7.x&lt;/code&gt; &quot;Naruto&quot; release, the Vue team aimed to backport lots of features from Vue 3 to Vue 2 without introducing a breaking change.
This will help you to migrate some things in preparation for a smooth Vue 3 switch.
Check out the &lt;a href=&quot;https://blog.vuejs.org/posts/vue-2-7-naruto.html&quot;&gt;official announcement&lt;/a&gt; and start migrating to the Vue 3 flavour in your Vue 2 app:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_typescript_or_not&quot;&gt;TypeScript or not?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you using TypeScript right now or do you plan to migrate to TypeScript?
In that case you should read the &lt;a href=&quot;https://vuejs.org/guide/typescript/overview.html&quot;&gt;TypeScript Notes for Vue 3&lt;/a&gt;.
Generally I would highly recommend to use TypeScript as the Vue 2 and Vue 3 TypeScript integration is great.
It will help you a lot to reduce runtime errors as hard debugging nights by analyzing bugs in production.
Be prepared, that switching to Typescript might require quite an effort, but it&amp;#8217;s still worth it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_check_your_dependencies&quot;&gt;Check your dependencies&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A big thing you definitely have to check before is: dependencies.
You should check if you are using packages that will rely on Vue 2 and won&amp;#8217;t be available for Vue 3.
Such dependencies will require your attention as they may block you from updating to Vue 3.
In my previous project we weren&amp;#8217;t able to update to Vue 3 a long time since we had a dependency to &lt;a href=&quot;https://bootstrap-vue.org&quot;&gt;BootstrapVue&lt;/a&gt; which wasn&amp;#8217;t working with Vue 3 and isn&amp;#8217;t still.
In such case where a package isn&amp;#8217;t compatible you have the following options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check if there is an equivalent package or a fork of your dependency that will support Vue 3. If there is one: be sure it&amp;#8217;s still maintained and alive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the package is just a Vue-wrapper for a common library, you may need to use the library directly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find a similar package that supports Vue 3. In this case you have to make sure the new dependency supports all your use-cases, and you have to plan how to migrate this dependency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can contribute to the dependency and help to make it Vue 3 compatible. You may have to check &lt;a href=&quot;https://github.com/vueuse/vue-demi&quot;&gt;VueDemi&lt;/a&gt; which is a great developing utility to create or update Universal Vue Libraries for Vue 2 &amp;amp; 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Worst Case: Write the features you need by yourself, but be sure to open-source it afterwards ;-)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In all these cases you should make yourself a list of the relevant development tasks with a very rough estimate about how complex the migration will be.
For example write a &lt;code&gt;+&lt;/code&gt; if the dependency migration is straight forward (already Vue 3 compatible).
Write &lt;code&gt;+&lt;/code&gt; for very hard-to-migrate dependencies, where you may need another solution or lib or implement stuff by yourself.
Add Notes about things you shouldn&amp;#8217;t forget when starting the migration.
You should also include development dependencies for example for webpack plugins.
It could look like the following example:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Vue 2 dependency&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Vue 3 dependency&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;notes&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;estimate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@dsb-norge/vue-keycloak-js&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@baloise/vue-keycloak&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;similar API, similar features&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;++&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;v-tooltip&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;floating-vue&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;same lib under the hood with more features&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;+&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;vue2-datepicker&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;vue-datepicker-next&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;same lib with Vue 3 support&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;+&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;vue2-leaflet&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@vue-leaflet/vue-leaflet&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;same API, but lots of relying components&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;++&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;vue2-leaflet-draw-toolbar&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;no Vue 3 equivalent&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;+&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;webpack-license-plugin&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;rollup-plugin-license&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;different plugin for rollup, with a different API, we need to check / adjust the output format&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;+&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_try_out_things_in_a_playground&quot;&gt;Try out things in a playground&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For dependency update / migrations you can&amp;#8217;t estimate, it&amp;#8217;s a good idea to set them up / try them out in an isolated new Vue 3 playground environment.
After playing around, you should be able to estimate the effort.
A good example when having a look at the migration list above would be to try out the &lt;code&gt;rollup-plugin-license&lt;/code&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_check_your_current_webpack_environment&quot;&gt;Check your current Webpack environment&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When coming from webpack and planning to migrate to Vite, you should check your webpack config for any special behaviors.
You can use the playground to reflect / try out the setup in Vite.
Here are some points that were interesting for us:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We don&amp;#8217;t need a specific SCSS/SASS/LESS configuration anymore as Vite brings &lt;a href=&quot;https://vitejs.dev/guide/features.html#css-pre-processors&quot;&gt;support for this out-of-the-box&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We needed to migrate the &lt;code&gt;webpack-license-plugin&lt;/code&gt; to &lt;code&gt;rollup-plugin-license&lt;/code&gt; (see above)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vite comes with its own &lt;a href=&quot;https://vitejs.dev/guide/env-and-mode.html&quot;&gt;approach of reading and passing environment variables and build modes&lt;/a&gt; which is quite easy and handy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://vitejs.dev/guide/assets.html&quot;&gt;Static Asset Handling by Vite&lt;/a&gt; is something you should probably know before&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_split_your_store_on_paper&quot;&gt;Split your Store on paper&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When currently using Vuex, you may be lucky, and you have already some modules splitting your store into logical parts.
In our case we had just one big store without any modules as the codebase has evolved over time, and we haven&amp;#8217;t made the step to split the store.
The migration to Pinia can be a good chance to face this now as Pinia lets you easily compose multiple small stores.
You should check your current store configuration and write down the modules that are loosely coupled or even completely independent (e.g. a &lt;code&gt;user&lt;/code&gt; or an &lt;code&gt;auth&lt;/code&gt; store).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_make_the_migration_transparent_and_estimable&quot;&gt;Make the migration transparent and estimable&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last thing we have done was to create a new epic for the whole migration and to create small estimable tasks.
This was very important as we were now able to identify things we can prepare and do even before we started the migration itself and also tasks we can do in advance.
On the other hand it helped us for the communication with the product owner and to make things transparent.
Please keep in mind to add some time buffer for unexpected things occurring during the migration where you may need some extra time.
For example: the migration from Vuex to Pinia took a lot more time than we thought before.
But: it was definitely worth it.
The TypeScript support is way better and the unification of actions and mutations reduces the Boilerplate code a lot.
We also underestimated the time we needed to migrate the tests.
This was hard by definition but quite time-consuming as I wrote in the introduction: We had a huge Vuex store.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_migrations_before_the_migration&quot;&gt;Migrations before the migration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting the migration itself you should migrate everything you can, which is not related to Vue 3 / vite.
Here is what we have done in my team before the migration itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_convert_filters_to_functions&quot;&gt;Convert Filters to functions&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vue 3 kicked out the concept of using filters in the template using the pipe (&lt;code&gt;|&lt;/code&gt;) syntax (&lt;code&gt;{{ expression | myFilter }}&lt;/code&gt;).
Filters are simply functions that can be imported and used directly.
You can already import the functions, use them as a method and then pass through the expression in the template before starting the Vu3 migration:
&lt;code&gt;{{ myFilter(expression) }}&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_update_and_migrate_dependencies&quot;&gt;Update and migrate dependencies&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Update all possible dependencies to their latest versions to make migrations for other libs in advance.
At this step: double-check if vue-specific libs are ready for using with Vue 3 or if there are other libs you have to use.
If you have to change to other libs and this one supports Vue 3, make the migration now.
In our team we had already lots of our dependencies updated, since we are using &lt;a href=&quot;https://www.mend.io/free-developer-tools/renovate/&quot;&gt;Mend (formerly Whitesource) Renovate&lt;/a&gt; for housekeeping and continuous dependency version updates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you decide to migrate a dependency to a new one that supports Vue 2 and Vue 3 or which should be replaced with a self-implementation:
Do it in advance before the actual Vue migration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_isolate_hard_to_migrate_components&quot;&gt;Isolate hard-to-migrate components&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It may happens, you realize, for some of your dependencies a migration won&amp;#8217;t be straight-forward.
In our case we decided some years ago, we want to use &lt;a href=&quot;https://leafletjs.com/&quot;&gt;Leaflet.js&lt;/a&gt; as our map library to display and interact with features on a map.
Therefore we also used a wrapper for Vue 2 applications called &lt;a href=&quot;https://github.com/vue-leaflet/Vue2Leaflet&quot;&gt;Vue2Leaflet&lt;/a&gt; which made us use Leaflet in a declarative manner.
However, this architectural decision was now a problem for us, as not only this dependency is not supposed to use it with Vue 3 but also extensions for this library such as &lt;a href=&quot;https://www.npmjs.com/package/@ozangokhanhergul/leaflet.heat&quot;&gt;Leaflet.heat&lt;/a&gt; needed to be migrated.
To face this issue we&amp;#8217;ve gone one step back and rethink our architectural decision to use Leaflet. At this time there was already a Vue 3 wrapper for leaflet available but not as feature-rich as we needed it.
So we created a new Architectural Decision Record (ADR) to evaluate and choose our future map library as it is a central component of our app and can&amp;#8217;t be easily replaced.
After doing a Proof-of-Concept (PoC), we decided to switch to &lt;a href=&quot;https://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt; and make use of the &lt;a href=&quot;https://github.com/MelihAltintas/vue3-openlayers&quot;&gt;vue3-openlayers&lt;/a&gt; wrapper too, where we were also able to contribute missing features back into the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This whole story is probably quite special to my team and our app, but the essential thing here was, that we prepared the central components in parallel to our productive app in a separate repository in isolation.
Therefore, we created the components and defined their props and events with the help of &lt;a href=&quot;https://storybook.js.org/&quot;&gt;Storybook&lt;/a&gt;.
Of course, we also created tests for these components, so that we were prepared to copy over all this into the productive app and replace the existing components later, when we were ready to actually migrate to Vue 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A drawback with this approach is of course: It probably blocks you with releasing new features or you have to implement them twice during the preparation time (one time for the productive app based on Vue 2, one time for the isolated components based on Vue 3).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_update_your_npm_scripts&quot;&gt;Update your NPM Scripts&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When checking your Vue 3 default setup you will notice that some NPM script names have changed by default.
For example the default command to run the development build and server is now &lt;code&gt;npm run dev&lt;/code&gt; instead of &lt;code&gt;npm run serve&lt;/code&gt;.
You can either change the names back since you are used to the &quot;old&quot; commands, or you can already name your commands in the Vue 2 setup to the new ones to get comfy with it.
Please note that you may have to change the commands in you CI/CD Pipeline too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_switch_to_vite&quot;&gt;Switch to Vite&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can switch to Vite before updating to Vue 3 this makes the &quot;big bang&quot; migration a bit smaller.
For that, you should install Vite and use the official plugin &lt;a href=&quot;https://www.npmjs.com/package/@vitejs/plugin-vue2&quot;&gt;@vitejs/plugin-vue2&lt;/a&gt;.
You also need to migrate all the webpack plugins and configs.
When the setup is finished, cleanup all the webpack stuff including the config and the dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the migration we noticed, that we haven&amp;#8217;t used &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export&quot;&gt;Type-Only Imports&lt;/a&gt; in all our typescript and &lt;code&gt;.vue&lt;/code&gt; files.
The default Vite setup is configured in such way, Type-Only Imports will be forced when needed, otherwise you&amp;#8217;ll receive errors during the build.
We had the option to either deactivate this strict behavior by setting the &lt;a href=&quot;https://www.typescriptlang.org/tsconfig#importsNotUsedAsValues&quot;&gt;typescript config option &lt;code&gt;importsNotUsedAsValues&lt;/code&gt;&lt;/a&gt; to either &lt;code&gt;preserve&lt;/code&gt; or &lt;code&gt;remove&lt;/code&gt; (not recommended) or to migrate.
Luckily, there is a community project called &lt;a href=&quot;https://github.com/JamieMason/ts-import-types-cli&quot;&gt;ts-import-types-cli&lt;/a&gt; that will automate a part of this step.
So we just had to run the following command to migrate to Type-Only Imports at places needed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;# remove the `--dry-run` flag to migrate actually and not only list the changes
npx ts-import-types-cli --no-organise-imports -p tsconfig.json --dry-run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The bad news: The tool didn&amp;#8217;t find all occurrences of the Type-Only Imports, so when running &lt;code&gt;npm run build&lt;/code&gt;, we caught some more we had to fix manually.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_switch_to_vitest&quot;&gt;Switch to Vitest&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After your migration to Vite, you should make use of Vitest as your new pretty and fast unit testing framework.
In comparison to &lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt; it comes with a stable out-of-the-box ESM support and faster test executions.
Until now Jest&amp;#8217;s support for ESM is &lt;a href=&quot;https://jestjs.io/docs/ecmascript-modules&quot;&gt;still experimental&lt;/a&gt; (State: Jest Version 29.5).
&lt;a href=&quot;https://vitest.dev/guide/migration.html#migrating-from-jest&quot;&gt;The API is quite similar and mostly compatible to jest&lt;/a&gt;.
If you used Mocha before, the migration shouldn&amp;#8217;t be hard either.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_switch_to_pinia&quot;&gt;Switch to Pinia&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next big step you should do in advance is the migration of your Vuex store.
You can also do this step after the migration itself and keep Vuex for now.
However, we decided, it&amp;#8217;s a good idea, to migrate the store before and switch to Pinia since the API is a lot simpler and better composable when slicing our big store into chunks.
Furthermore, it comes with better TypeScript support.
At the &lt;a href=&quot;https://pinia.vuejs.org/cookbook/migration-vuex.html&quot;&gt;Pinia-Docs you will find a very detailed Guide for the Migration from Vuex&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_migrate_components&quot;&gt;Migrate Components&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least we decided to migrate all our components to the &lt;a href=&quot;https://vuejs.org/api/composition-api-setup.html&quot;&gt;composition API&lt;/a&gt; with the &lt;a href=&quot;https://vuejs.org/api/sfc-script-setup.html&quot;&gt;&lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; syntactical sugar&lt;/a&gt;.
This is a step you can also omit or do in advance, but we recommend using this API since it&amp;#8217;s also a bit more performant, and it reduces the boilerplate code you have to write.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_finally_migrate_to_vue_3&quot;&gt;Finally: Migrate to Vue 3&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are now prepared to migrate to Vue 3, and you&amp;#8217;ve done already a lot of things which made this step much easier and shorter.
Now you can start the migration of Vue itself.
Keep in mind, that for the actual migration you must migrate the unit tests too as the test utils for vue3 are slightly different.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_migrate_the_source_code&quot;&gt;Migrate the source code&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we started by adding Vue 3 as well as the &lt;code&gt;@vue/compat&lt;/code&gt; package as described in the &lt;a href=&quot;https://v3-migration.vuejs.org/migration-build.html#migration-build&quot;&gt;Vue 3 Migration Build documentation&lt;/a&gt;.
Also, we needed to update the &lt;code&gt;VueRouter&lt;/code&gt; to version &lt;code&gt;4.x.x&lt;/code&gt; and adjust the configuration.
As good step-by-step guides, I would recommend you again to read the following Blogposts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://crisp.chat/blog/vuejs-migration&quot;&gt;&quot;Vue.js: How to Migrate a large project from Vue 2 to Vue 3&quot;&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/baptistejamin&quot;&gt;Baptiste Jamin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The official Vue 2 to Vue 3 &lt;a href=&quot;https://v3-migration.vuejs.org&quot;&gt;Migration Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have already prepared some components in isolation to work with Vue 3 as we did:
Of course you should replace the old ones and probably adjust the props or events if the API of your new components changed compared to the Vue 2 ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After this step your whole app should work as before (fingers crossed).
The migration of the components itself can be done one by one after the migration until everything is converted to Vue 3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_migrate_to_vuetest_utilsv2&quot;&gt;Migrate to &lt;code&gt;@vue/test-utils@v2&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you migrated everything, you need to update to &lt;code&gt;@vue/test-utils@v2&lt;/code&gt;.
The migration should be straight-forward when &lt;a href=&quot;https://test-utils.vuejs.org/migration/&quot;&gt;following the migration guide&lt;/a&gt;.
Nonetheless it can take quite a bit of time depending on the amount of unit tests you have.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_post_migration_steps&quot;&gt;Post-Migration-Steps&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_remove_compatibility_package&quot;&gt;Remove Compatibility Package&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once every component is migrated, make sure to remove the &lt;code&gt;@vue/compat&lt;/code&gt; and it&amp;#8217;s configuration as you don&amp;#8217;t need it anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_make_use_of_the_teleport_feature&quot;&gt;Make use of the Teleport feature&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we are using Vue 3, we can use the &lt;a href=&quot;https://vuejs.org/guide/built-ins/teleport.html&quot;&gt;&quot;Teleport&quot;&lt;/a&gt; feature.
Think about components creating their DOM elements deeply in the DOM caused by the component hierarchy but where you would expect the elements to appear somewhere else close to the root.
A good example is displaying a modal conditionally:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;html&quot;&gt;&amp;lt;body&amp;gt;
  &amp;lt;ComponentOne&amp;gt;
    &amp;lt;ComponentTwo&amp;gt;
      &amp;lt;ComponentThree&amp;gt;
        &amp;lt;MyModal v-if=&quot;myCondition&quot;&amp;gt;
      &amp;lt;/ComponentThree&amp;gt;
    &amp;lt;/ComponentTwo&amp;gt;
  &amp;lt;/ComponentOne&amp;gt;
&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Vue 2, the modal would be rendered and appear inside the &lt;code&gt;ComponentThree&lt;/code&gt;.
Using teleport in &lt;code&gt;MyModal&lt;/code&gt; can lift the element up to the &lt;code&gt;body&lt;/code&gt; tag which makes more sense for common modal dialogs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Migrating from Vue 2 to Vue 3 can be a huge thing and takes quite a bit of time.
But good preparation and pre-migration will make the whole migration process much easier, more estimable and won&amp;#8217;t block you for so long with releasing new features. Compared to writing the whole thing from scratch, we think this was well worth it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope this post gave you some inspiration of how you can face the migration of your project.
Happy Migration ✌🏼&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Developer Experience Platform</title>
      <link>http://jbake.org/blog/2023/2023-05-15-developer-experience-platform-fuer-entwicklerinnen.html</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-05-15-developer-experience-platform-fuer-entwicklerinnen.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_developer_experience_platform_dxp_für_entwicklerinnen&quot;&gt;Developer Experience Platform (DXP) für Entwickler:innen&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_developer_experience_platform_dxp_für_entwicklerinnen&quot;&gt;Developer Experience Platform (DXP) für Entwickler:innen&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Developer Experience Platform (DXP) bietet Services für jede Phase der Software-Entwicklung.
Konzern- und Betreibervorgaben sowie Cloud-Richtlinien sind in diesen Services bereits inkludiert.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DXP ermöglicht damit DB-konzernweit, dass Entwickler:innen schnell,
einfach und sicher Deployments vornehmen können und
Software-Anwendungen von der Konzeption bis zum produktiven Einsatz schneller entwickelt werden.
Das Erklärvideo zeigt dies, indem es Zuschauende in den Alltag von Entwickler:innen „entführt“.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;video-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://www.youtube-nocookie.com/embed/-whkeD024zk?si=Y_mIn3Oo_r_LYq10&quot; title=&quot;YouTube video player&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Projekt Loom ist da</title>
      <link>http://jbake.org/blog/2023/2023-05-05-loom-threading.html</link>
      <pubDate>Fri, 5 May 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-05-05-loom-threading.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_threading_wie_es_sein_soll_projekt_loom_ist_da&quot;&gt;Threading wie es sein soll: Projekt Loom ist da&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_virtualisierung_hilft_schon_immer&quot;&gt;Virtualisierung hilft schon immer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_und_der_weg_ins_schlamassel&quot;&gt;… und der Weg ins Schlamassel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_threads_sind_die_grundlage_der_nebenläufigkeit&quot;&gt;Threads sind die Grundlage der Nebenläufigkeit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_asynchrone_programmierung_als_notlösung&quot;&gt;Asynchrone Programmierung als Notlösung&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_projekt_loom_als_rettung&quot;&gt;Projekt Loom als Rettung&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_virtualthreads_benutzen_ist_fast_einfacher_als_vermeiden&quot;&gt;VirtualThreads: benutzen ist (fast) einfacher als vermeiden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_anpassungen_im_eigenen_code&quot;&gt;Anpassungen im eigenen Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_angewohnheiten_hinterfragen&quot;&gt;Angewohnheiten hinterfragen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_synchron_war_nie_schlecht&quot;&gt;Synchron war nie schlecht&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_ausblick_structured_concurrency&quot;&gt;Ausblick: Structured Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_threading_wie_es_sein_soll_projekt_loom_ist_da&quot;&gt;Threading wie es sein soll: Projekt Loom ist da&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es ist endlich so weit - das lang ersehnte Projekt Loom hat seinen Weg in das JDK gefunden!&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Seit über fünf Jahren haben wir uns danach gesehnt, all die Krücken wie
&lt;a href=&quot;https://www.tutorialspoint.com/java_nio/java_nio_socket_channel.htm&quot;&gt;NIO&lt;/a&gt;,
&lt;a href=&quot;https://www.ideas2it.com/blogs/the-future-interface-the-best-way-for-asynchronous-java-programming/&quot;&gt;asynchrone Programmierung&lt;/a&gt;,
&lt;code&gt;CompletableFutures&lt;/code&gt; und
&lt;code&gt;&lt;a href=&quot;https://www.hackerearth.com/practice/notes/asynchronous-servlets-in-java/&quot;&gt;AsyncServlets&lt;/a&gt;&lt;/code&gt;
hinter uns zu lassen und Java wieder so zu schreiben, wie wir es schon immer wollten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_virtualisierung_hilft_schon_immer&quot;&gt;Virtualisierung hilft schon immer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Auf jedem Rechner gibt es Ressourcen, die begrenzt sind. CPU-Zeit ist seit jeher eine knappe Ressource. Gleichzeitig müssen jedoch häufig viele kleine Aufgaben erledigt werden. Heutzutage verwenden wir meist API-Backends, die Anfragen über HTTP erhalten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sie lesen Daten, transformieren sie und verändern sie gegebenenfalls. Anschließend wird die Antwort per Netzwerk-IO gesendet. Dabei die Ressourcen effizient zu nutzen, war von Anfang an eine Herausforderung und erforderte viel manuelle Arbeit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zum Glück hatte Edsger W. Dijkstra bereits im Jahr 1965 die brillante Idee, den Zugriff auf wertvolle Ressourcen zu virtualisieren. So bekam das
&lt;a href=&quot;https://en.wikipedia.org/wiki/Berkeley_Timesharing_System&quot;&gt;Berkeley Timesharing System&lt;/a&gt;
die
&lt;a href=&quot;http://www.serpentine.com/blog/threads-faq/the-history-of-threads/&quot;&gt;ersten Threads&lt;/a&gt;
der Computer-Geschichte. Das Konzept war einfach: Threads sind kostengünstig und virtualisieren den Zugriff auf wertvolle Ressourcen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;//images/20230505-loom-threading/bs-threads.svg&quot; alt=&quot;Threading wie die Urahnen - mit einer CPU&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Threading wie die Urahnen - mit einer CPU&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein Scheduler sorgt dafür, dass blockierte Threads unterbrochen werden und andere Aufgaben ausgeführt werden können, bis die notwendigen Ressourcen verfügbar sind. Ein wahrhaft revolutionäres Konzept!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Welt hat sich seit den ersten Threads des Berkeley Timesharing Systems weiterentwickelt. „Moderne“ Betriebssysteme wie
&lt;a href=&quot;https://de.wikipedia.org/wiki/AmigaOS&quot;&gt;AmigaOS&lt;/a&gt;
haben das Konzept des Threading verbessert, indem sie es dem Betriebssystem erlauben, rechnende Prozesse zu unterbrechen und an anderer Stelle fortfahren zu lassen. Anders als bei
&lt;a href=&quot;https://docs.oracle.com/cd/E19455-01/806-5257/6je9h033n/index.html&quot;&gt;User Threads in SunOS&lt;/a&gt;,
wo der Code im Thread selbst anzeigt, wann er unterbrochen werden soll.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_und_der_weg_ins_schlamassel&quot;&gt;… und der Weg ins Schlamassel&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir haben seitdem viel getan, um das Thread-Konzept kaputt zu bekommen. Wir nutzen gerade Netz-IO in modernen Anwendungen ganz intensiv. IO ist oft das, was diese Anwendungen am meisten machen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und auf der anderen Seite ist die
&lt;a href=&quot;https://www.researchgate.net/figure/CPU-performance-Historical-trends_fig1_321800076&quot;&gt;Hardware viel schneller als `65&lt;/a&gt;. Wir haben so viele Requests zu verarbeiten und die Rechner sind schnell genug. Das geht. Wir können mal eben eine Million Sockets offenhalten und damit arbeiten. Nur: das Threading selbst kommt nur mit
&lt;a href=&quot;https://www.tutorialspoint.com/what-is-the-maximum-number-of-threads-per-process-in-linux&quot;&gt;ein paar zehntausend Threads&lt;/a&gt;
klar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und deswegen sind inzwischen die Threads selbst die wertvolle Ressource. Und deswegen mussten wir anfangen, die Threads selbst zu teilen, zu poolen und sie wiederzuverwenden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hierhin fällt der Aufstieg der
&lt;a href=&quot;https://blog.bitsrc.io/event-based-asynchronous-programming-abb0447381eb?gi=dc11417acbc0&quot;&gt;Event-basierten IO-Bibliotheken&lt;/a&gt;.
Netty fällt in diese Kategorie.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;//images/20230505-loom-threading/ioloop.svg&quot; alt=&quot;IO-Thread und Worker-Thread bei der Arbeit&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. IO-Thread und Worker-Thread bei der Arbeit&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IO und Worker Threads: ein speziell für IO-Operationen abgestellter Thread nimmt Daten entgegen. Dieser Thread wickelt sämtliche IO-Operationen ab. Damit entfällt auch die Notwendigkeit für Locking und Synchronisierung. Sobald Daten eingetroffen sind, werden sie in separaten Worker-Threads verarbeitet. Worker-Threads sollen selbst nie blockieren.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es wird dabei meistens nur ein Thread (manchmal einer pro CPU)
&lt;a href=&quot;https://medium.com/@akhaku/netty-data-model-threading-and-gotchas-cab820e4815a&quot;&gt;mit IO&lt;/a&gt;
beauftragt. Er arbeitet mit
&lt;a href=&quot;https://en.wikipedia.org/wiki/Non-blocking_I/O_(Java)&quot;&gt;„non-blocking IO“&lt;/a&gt;
, erhält also Events, sobald eine IO-Operation abgeschlossen ist. Dadurch kann ein Thread alle offenen Sockets auf einmal bearbeiten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sobald das IO abgeschlossen ist, wandert die Arbeit zu einem Worker-Thread weiter, der Berechnungen vornimmt. So lässt sich in unserem Beispiel bei drei gleichzeitig aktiven Requests die Thread-Zahl auf zwei reduzieren.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Preis dafür ist, dass die Worker-Threads selbst Bescheid geben müssen, wenn sie fertig sind. Da ist dann das „alte“ kooperative Multitasking wieder. In der Praxis spielt das aber weniger eine Rolle, weil wir mehrere Worker-Threads benutzen, als Thread-Pool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Trotzdem – wir bezahlen gleich mehrere Preise dafür:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Für jeden Request gibt es mindestens zwei Thread-Wechsel. Und die sind teuer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sind Teile der Anwendung rechenintensiv, dann müssen wir selbst dafür sorgen, dass sie niemanden blockieren. Dann gibt es mehrere Thread-Pools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203; und wir brauchen ein kluges Threading-Konzept. Meistens heißt das, verschiedene Pools für Rechenlast, Netzwerk und File-IO einzuführen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die IO-APIs sind alles andere als einfach zu bedienen. Und immer etwas anders. Netty für Netzwerk-IO. NIO für File-IO. RDBC für den Datenbankzugriff.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_threads_sind_die_grundlage_der_nebenläufigkeit&quot;&gt;Threads sind die Grundlage der Nebenläufigkeit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Kernkonzepte von Java basieren auf Threads. Das gilt für den Sprachkern, die VM, fürs Debugging und das Profiling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IO-APIs waren synchron und sind in synchroner Form heute noch am übersichtlichsten zu benutzen. Das gesamte Exception-System ergibt nur
&lt;a href=&quot;https://stackoverflow.com/questions/67631513/short-circuiting-the-chain-of-completionstage&quot;&gt;innerhalb eines Threads&lt;/a&gt;
wirklich Sinn. Speicherzugriffe innerhalb eines Threads sind geordnet und überschaubar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir könnten am übersichtlichsten alle Arbeit für einen Request in einem eigenen Thread erledigen. Wir könnten einfach einen
&lt;a href=&quot;https://dzone.com/articles/spring-webflux-eventloop-vs-thread-per-request-mod&quot;&gt;Thread pro Request starten&lt;/a&gt;,
synchrone APIs verwenden. Aber es geht nicht, weil einfach zu wenige Threads verfügbar sind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_asynchrone_programmierung_als_notlösung&quot;&gt;Asynchrone Programmierung als Notlösung&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Als Konsequenz opfern wir den Java-Sprachkern und verwenden reaktive Bibliotheken. Und müssen uns für Konstrukte wie Schleifen, If und Try-Catch komplett neue Konstrukte einfallen lassen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;CompletableFuture
    .supplyAsync(info::getUrl, pool)
    .thenCompose(url -&amp;gt; getBodyAsync(
        pool,
        HttpResponse.BodySubscribers.ofString(UTF_8)))
    .thenApply(info::findImage)
    .thenCompose(url -&amp;gt; getBodyAsync(
        pool,
        HttpResponse.BodySubscribers.ofByteArray()))
    .thenApply(info::setImageData)
    .thenAccept(this::process)
    .exceptionally(t -&amp;gt; { t.printStackTrace(); return null; });&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Ohne auf den konkreten Inhalt dieses Handlers einzugehen, lässt sich die Auswirkung auf die Struktur der Programmiersprache erkennen: Das Programm wird nicht mehr in der üblichen Weise strukturiert, sondern über eine &quot;Fluent API&quot; erstellt und gestartet. Im Kern stellt das eine Monade dar, wie sie zum Beispiel aus Haskell bekannt ist. Dieses neue Sprachkonstrukt hat eine Reihe von Folgen, die interessant zu nutzen sind.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit all den Problemen, die daraus resultieren, dass jetzt JVM, Werkzeuge, Sprache und Tools nicht mehr so recht zusammenpassen wollen: In Stack Traces steht oft
&lt;a href=&quot;https://www.baeldung.com/spring-debugging-reactive-streams&quot;&gt;kaum noch Hilfreiches&lt;/a&gt;.
Mit dem Debugger durch ein reaktives Programm zu steppen ist eine Herausforderung. Und die Ursache für Lastprobleme zu finden, ist problematisch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Diesen Programmierstil verwenden wir definitiv nicht, weil er einfacher zu verstehen wäre. Oder weil er sonst irgendwie nützlicher zu handhaben wäre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir verwenden diesen Programmierstil, weil wir nicht anders skalieren können.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_projekt_loom_als_rettung&quot;&gt;Projekt Loom als Rettung&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Idee hinter Projekt Loom: Threads müssen wieder so billig werden wie damals. Es darf kein Problem sein, Millionen davon zu starten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die JVM mappt dazu ihre eigene Art von Threads, die dort VirtualThreads heißen, auf Betriebssystem-Threads. Das ist ein M:N-Mapping. Also anders als damals zu Solaris-Zeiten, als „Green Threads“ eben nur auf einen einzigen OS-Thread abgebildet werden konnten. Aber ziemlich so, wie es
&lt;a href=&quot;https://www.poeticoding.com/spawning-processes-in-elixir-a-gentle-introduction-to-concurrency/&quot;&gt;in Erlang&lt;/a&gt;
schon immer war. Und auch die Go-Fans lachten ja bereits über uns Java-Menschen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die JVM kann das deswegen besser als das Betriebssystem, weil es zum einen mehr Wissen besitzt (zum Beispiel über Stack-Größen und das Speichermodell) und zum anderen, weil es Threads nicht jederzeit unterbrechen kann. Stattdessen wird nur dort unterbrochen, wo es blockierende Operationen gibt. Das sind hauptsächlich IO-Operationen, aber auch dort, wo wir in unseren Programmen manuell synchronisieren.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Damit das funktioniert, gab es im Rahmen des Projekts Loom Anpassungen quer durch die JVM und die Basis-Bibliotheken. NIO wurde umgebaut. Das „alte“ IO wurde angepasst (und darf und soll damit ruhig wieder benutzt werden). Nur File-IO unter Windows ist noch ein Problem und dauert noch.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_virtualthreads_benutzen_ist_fast_einfacher_als_vermeiden&quot;&gt;VirtualThreads: benutzen ist (fast) einfacher als vermeiden&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Seit Java 19 können wir Threads sehr einfach als „virtual“ starten:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;var thread = Thread.startVirtualThread(() -&amp;gt; { ... });&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das ist schon alles. Die JVM kümmert sich darum, dass diese VirtualThreads automatisch auf OS-Threads abgebildet werden. Normalerweise auf einen pro CPU-Kern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In diesem VirtualThread lassen sich nach Herzens Lust blockierende Aufrufe, Locks und Sleeps in synchroner Art platzieren. Wir sollen uns keine Gedanken mehr darüber machen, wie der Wettstreit um die Ressourcen läuft.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_anpassungen_im_eigenen_code&quot;&gt;Anpassungen im eigenen Code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Einige Code-Konstrukte spielen nicht so gut mit VirtualThreads zusammen. Wir können sie ersetzen, damit der Code noch besser skaliert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ganz weit vorne ist (jedenfalls derzeit) noch der „synchronized“-Block. Der hängt immer an einem OS-Thread, weil er mit Betriebssystemmitteln implementiert ist. Wir wollen ihn mit „ReentrantLock“ oder noch besser mit „StampedLock“ ersetzen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der zweite Bereich sind JNI-Aufrufe. Die sind immer dann problematisch, wenn sie innerhalb von „synchronized“ passieren. Vor allem, wenn wir von nativem Code wieder nach Java callen, zum Beispiel bei Callbacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alles das muss uns aber nicht aufhalten. In den meisten Fällen machen ein paar wenige solche Stellen wenig aus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_viele_frameworks_integrieren_virtualthreads_bereits&quot;&gt;Viele Frameworks integrieren VirtualThreads bereits&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Spring Boot Projekten werden wir bereits dahin geführt, dass wir Threading an zentraler Stelle implementieren. So wie Spring Boot es intern auch bereits macht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir können heute schon dafür sorgen, dass Spring Boot auf VirtualThreads setzt:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Configuration
class ConfigureVirtualThreads {

    @Bean(TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME)
    public AsyncTaskExecutor asyncTaskExecutor() {
        return new TaskExecutorAdapter(
                Executors.newVirtualThreadPerTaskExecutor());
    }

    @Bean
    public TomcatProtocolHandlerCustomizer&amp;lt;?&amp;gt; protocolHandlerVirtualThreadExecutorCustomizer() {
        return protocolHandler -&amp;gt; {
            protocolHandler.setExecutor(
                Executors.newVirtualThreadPerTaskExecutor());
        };
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Mit der ersten Deklaration wird Spring konfiguriert. Der neue Task-Executor, den Spring an verschiedenen Stellen für asynchrone Aufrufe nutzt, erhält dafür jeweils einen neuen VirtualThread, statt wie vorher einen Thread-Pool.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Die zweite Deklaration konfiguriert den eingebetteten Tomcat, mit dem Spring Boot die Web-Anfragen bearbeitet. Hier ist normalerweise ebenfalls ein Threadpool hinterlegt. Mit der Konfiguration fällt dieser Pool weg und es wird jedes Mal ein neuer VirtualThread zur Bearbeitung angelegt.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das als Configuration eingefügt und schon kommen Servlet-Requests bereits fertig als VirtualThread an.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Spring Boot hat VirtualThreads auf dem Schirm, passt immer mal wieder etwas an und ist schon recht weit damit, VirtualThreads sehr effizient zu nutzen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/micronaut-projects/micronaut-core/pull/8180&quot;&gt;Micronaut hat ebenfalls schon Support vorbereitet&lt;/a&gt;,
der getestet werden kann.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und für Quarkus gibt es schon
&lt;a href=&quot;https://piotrminkowski.com/2022/10/06/quarkus-with-java-virtual-threads/&quot;&gt;sehr weitreichenden Support&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und sogar in Wildfly 27 lässt sich VirtualThread-Support aktivieren.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_angewohnheiten_hinterfragen&quot;&gt;Angewohnheiten hinterfragen&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit Projekt Loom müssen wir fast nie neue Konzepte lernen. Stattdessen können wir alte Gewohnheiten ablegen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ThreadPools werden in den meisten Fällen keinen Mehrwert mehr bieten. Im Gegenteil fügen sie Overhead hinzu und
&lt;a href=&quot;https://medium.com/javarevisited/is-the-thread-per-request-model-a-good-thing-after-project-loom-6d08012839e8&quot;&gt;verlangsamen den eigenen Code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wo wir bisher Poolen, zum Beispiel um die Anzahl gleichzeitig durchgeführter Requests zu limitieren, können wir wieder (wie früher) Semaphoren beim Funktionsaufruf nutzen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_synchron_war_nie_schlecht&quot;&gt;Synchron war nie schlecht&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und dann natürlich die Erkenntnis: für 99&amp;#160;% aller Applikationen da draußen war asynchrone Programmierung nie nötig. Auch nicht ohne Projekt Loom. Die wenigsten haben mehr als 30.000 gleichzeitige Requests pro Service-Instanz. Moderne Hardware hat damit kein Problem, auch nicht mit 30k Betriebssystem-Threads. Und weil die Stack-Größe nur virtuellen Speicher angibt, haben wir auf 64-Bit-Systemen kein Problem damit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_ausblick_structured_concurrency&quot;&gt;Ausblick: Structured Concurrency&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bis mit Java 21 im Herbst 2023 das nächste LTS-Release aufschlägt, soll auch Structured Concurrency mit aufgenommen sein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Damit lassen sich dann die Stellen übersichtlich angehen, bei denen innerhalb einer Aufgabe Anfragen und Berechnungen parallel erfolgen sollen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;@GetMapping(&quot;/trains&quot;)
fun listTrainsParallel(): TrainList&amp;lt;TrainRepresentation&amp;gt; {
    val list = StructuredTaskScope.ShutdownOnSuccess&amp;lt;List&amp;lt;Train&amp;gt;&amp;gt;().use { scope -&amp;gt;
        scope.fork { serverA.listActiveSync() }
        scope.fork { serverB.listActiveSync() }
        scope.join().result().map { it.toListRepresentation() }
    }
    val count = StructuredTaskScope.ShutdownOnSuccess&amp;lt;Int&amp;gt;().use { scope -&amp;gt;
        scope.fork { serverA.countActiveSync() }
        scope.fork { serverB.countActiveSync() }
        scope.joinUntil(Instant.now().plusSeconds(15)).result()
    }
    return TrainList(list, count)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Bei den beiden Abfragen können wir einfach (übrigens wieder als Monade) deklarieren, dass die dahinter liegenden Abfragen in separaten Threads erfolgen - im besten Fall in VirtualThreads. &quot;ShutdownOnSuccess&quot; sorgt dafür, dass das erste verfügbare Ergebnis gewinnt und alle anderen Threads beendet werden. Wir können einen Timeout mitgeben, um die Laufzeit - hier auf 15 Sekunden - zu begrenzen.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dabei ist wichtig: Es geht bei Structured Concurrency wirklich fast nur um die Lesbarkeit und Wartbarkeit. Schneller oder Ressourcen-sparender wird es dadurch nicht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also: Es wird spannend im Java-Ökosystem. Mit Projekt Loom werden tatsächlich die Karten neu gemischt. Endlich können wir den Programmierstil wieder so aussuchen, wie er zu unseren Gehirnen passt.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>JavaLand 2023</title>
      <link>http://jbake.org/blog/2023/2023-04-09-vortrag-auf-der-javaland.html</link>
      <pubDate>Sat, 1 Apr 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-04-09-vortrag-auf-der-javaland.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_vortrag_auf_der_javaland_2023&quot;&gt;Vortrag auf der JavaLand 2023&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vortrag_auf_der_javaland_2023&quot;&gt;Vortrag auf der JavaLand 2023&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vom 20. bis 23. März fand mit der JavaLand die große Java-Community-Konferenz im Phantasialand Brühl statt - und
DB Systel war mit dabei.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In dem Talk &quot;Fantastische Diagramme und wie Du sie selbst erstellst&quot; haben Falk Sippach (embarc) und
Ralf D. Müller (DB Systel) gemeinsam Schwachstellen von Architekturdiagrammen aufgespürt und ausgemerzt.
In den Slides des Vortrags (siehe Download-Link unten) finden sich als Ergebnis ein paar Tipps und Checklisten,
die jeder für seine eigenen Diagramme verwenden kann.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Abends gab es dann noch einen Fun-Workshop &quot;Hacking the RP2040&quot;, bei dem wir uns angesehen haben,
was man so alles mit dem Tufty-Badge von Pimoroni anstellen kann.
Dabei handelt es sich um ein kleines 320x240 Display mit Tastern und RP2040 Microcontroller
(besser bekannt als Raspberry Pi Pico) in der Form eines Badges zum Umhängen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das eigentliche Highlight der jährlichen JavaLand war aber die Community mit ihren vielen Hallway-Tracks und
dem Newcomer-Programm &quot;NextGen&quot; über das immer wieder frische Themen und Sichtweisen in das Programm aufgenommen werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://dbsystel.github.io/jl23-rp2040/slides.html#/&quot;&gt;Slides des Workshops&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;speakerdeck-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/41f2b88302254e0cb340bec890ca0d38&quot; title=&quot;Phantastische Diagramme und wie Du sie selbst erstellst&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Indoor-GIS</title>
      <link>http://jbake.org/blog/2023/2023-04-01-Indoor-GIS-zur-Rationalisierung-von-Wartungsarbeiten.html</link>
      <pubDate>Sat, 1 Apr 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-04-01-Indoor-GIS-zur-Rationalisierung-von-Wartungsarbeiten.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_indoor_gis_zur_rationalisierung_von_wartungsarbeiten&quot;&gt;Indoor-GIS zur Rationalisierung von Wartungsarbeiten&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_indoor_gis_zur_rationalisierung_von_wartungsarbeiten&quot;&gt;Indoor-GIS zur Rationalisierung von Wartungsarbeiten&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Genial kombiniert: Mit Tracking-Technologie und unserer Esri-Plattform Kosten und Durchlaufzeiten reduzieren.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Durch die Kombination von Tracking-Technologie und unserer Esri-Plattform nutzen wir die modernsten Tracking-Systeme.
Auf diese Weise reduzieren wir Kosten und Durchlaufzeiten.
Eine Erfolgsgeschichte in der Arbeitswelt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Erfahren Sie, wie die offene Plattformarchitektur viele Anwendungsfälle ermöglicht.
Beispiele finden Sie in der beigefügten Präsentation.
Sie wurde im Rahmen eines Vortrags von Konrad Winkler &amp;amp; Philippe Rieffel im Rahmen der Esri International Infrastructure Management &amp;amp; GIS Conference am 18.04.2023 in Frankfurt gezeigt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hinweis: Die Präsentation liegt in englischer Sprache vor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dbsystel.de/resource/blob/10621498/fec800ef94e994a94c41bd67e80eb8c6/IMGIS_2023_Winkler_Rieffel-data-data.pdf&quot;&gt;download&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>ChatGPT</title>
      <link>http://jbake.org/blog/2023/2023-03-28-ChatGPT-Einblicke-und-mehr-Generative-Sprachmodelle-Herausforderungen-und-Chancen.html</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-03-28-ChatGPT-Einblicke-und-mehr-Generative-Sprachmodelle-Herausforderungen-und-Chancen.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_chatgpt_funktionsweise_chancen_risiken_und_alternativen_einfach_erklärt&quot;&gt;ChatGPT – Funktionsweise, Chancen, Risiken und Alternativen einfach erklärt&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_chatgpt_funktionsweise_chancen_risiken_und_alternativen_einfach_erklärt&quot;&gt;ChatGPT – Funktionsweise, Chancen, Risiken und Alternativen einfach erklärt&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In diesem Video erkläre ich leichtverständlich die Funktionsweise von ChatGPT im Zusammenhang
mit generativer Künstlicher Intelligenz (Generative AI) und großen Sprachmodellen (Large Language Models, kurz LLMs).&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anhand von Anwendungsfällen beschreibe ich Chancen, Risiken und Alternativen und
diskutiere, was das für uns und unsere Jobs zukünftig bedeuten könnte. &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;video-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://www.youtube.com/embed/zPQqdnmZvuY?si=WG4CimKzCMu_-ihM&quot; title=&quot;ChatGPT – Funktionsweise, Chancen, Risiken und Alternativen einfach erklärt&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Re-Platforming Mainframe</title>
      <link>http://jbake.org/blog/2023/2023-03-08-Re-Platforming-Mainframe-Mehr-als-nur-Lift-Shift.html</link>
      <pubDate>Wed, 8 Mar 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2023/2023-03-08-Re-Platforming-Mainframe-Mehr-als-nur-Lift-Shift.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_re_platforming_mainframe_mehr_als_nur_liftshift&quot;&gt;Re-Platforming Mainframe – Mehr als nur Lift&amp;amp;Shift&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_re_platforming_mainframe_mehr_als_nur_liftshift&quot;&gt;Re-Platforming Mainframe – Mehr als nur Lift&amp;amp;Shift&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die sinkende Bedeutung der Mainframe-Plattform führt uns zu unserem Projektziel Lift&amp;amp;Shift.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Migration in die Cloud soll mit möglichst wenigen Anpassungen erfolgen.
Dabei wollen wir die IBM Mainframe basierten Cobol Anwendungen durch schrittweise Überführung der Anwendungen in die DB Enterprise Cloud ablösen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Schaffung einer zukunftsorientierten IT-Architektur und signifikante Einsparungen von Betriebskosten
durch die Nutzung cloudbasierter Infrastruktur sind ebenso wichtig.
Lesen Sie in unserer Präsentation, welche Projektziele wir außerdem verfolgen,
wer unsere Partner sind und wie unsere Bestandsanalyse aussieht.
Gezeigt wurde sie im Rahmen eines Vortrags von Tim Engeleiter am 08.03.2023 bei den Mainframe Dayz in Wiesbaden.  &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides&quot;&gt;Slides&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dbsystel.de/resource/blob/10618882/a9f78504495f491f52042884428c711f/Replatformin-Mainframe-data-data.pdf&quot;&gt;download&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Good Practices im API-Umfeld</title>
      <link>http://jbake.org/blog/2022/2022-15-03-good-practices-api.html</link>
      <pubDate>Fri, 3 Mar 2023 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/2022-15-03-good-practices-api.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_hätt_ich_das_früher_gewusst_good_practices_bei_api_konzeption_entwicklung&quot;&gt;Hätt&apos; ich das früher gewusst - Good Practices bei API-Konzeption &amp;amp; -Entwicklung&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides_und_video&quot;&gt;Slides und Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hätt_ich_das_früher_gewusst_good_practices_bei_api_konzeption_entwicklung&quot;&gt;Hätt&apos; ich das früher gewusst - Good Practices bei API-Konzeption &amp;amp; -Entwicklung&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wenn du diese API noch einmal konzipieren könntest, würdest du alles noch mal genauso machen?
Nicht ganz, ich würde von Anfang an &amp;#8230;&amp;#8203; ja, was eigentlich?
Im Vortrag ziehe ich eine Zwischenbilanz aus über drei Jahren API-Entwicklung bei der DB Systel GmbH, indem ich unsere Vorgehensweisen bei API-Design und -Implementierung analysiere und praktische Ratschläge daraus ableite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unser Vorhaben war, viele APIs für generische Aufgaben (wie Bezahlung oder Routing) und Daten (wie von Bahnhöfen oder Sharing-Fahrzeugen) zentral bereitzustellen.
Doch wieso erwies sich das in vielen dieser Fälle als ungeeignet?
Das Einhalten von Paradigmen wie API-first und REST stand anfangs im Fokus aller Produkte.
Aber warum ist API-first gar nicht immer optimal?
Und wieso können wir heute mit imperfekten REST-APIs ruhig schlafen?
Mittlerweile nutzen wir Tools und Frameworks wie den OpenAPI-Generator, MapStruct, Lombok und OpenFeign.
Was hat uns anfangs davon abgehalten?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides_und_video&quot;&gt;Slides und Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;speakerdeck-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/ff4ac44c9d3b47a5881e8b49d9cb469e&quot; title=&quot;Spock and AsciiDoc - ein perfektes Paar&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/728535240?h=ffe28f2c25&amp;color=FCB913&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; width: 100%; height: auto;&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>K8s at Deutsche Bahn</title>
      <link>http://jbake.org/blog/2022/2022-11-24-the-journey-towards-K8s-at-Deutsche-Bahn.html</link>
      <pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/2022-11-24-the-journey-towards-K8s-at-Deutsche-Bahn.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_the_journey_towards_k8s_at_deutsche_bahn&quot;&gt;The journey towards K8s at Deutsche Bahn&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_journey_towards_k8s_at_deutsche_bahn&quot;&gt;The journey towards K8s at Deutsche Bahn&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This lecture was given by Gualter Barbas Baptista from DB Systel at the Containerdays from 05 to 07 September 2022.
(&lt;a href=&quot;https://www.containerdays.io/&quot; class=&quot;bare&quot;&gt;https://www.containerdays.io/&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2016, Deutsche Bahn decided to get rid of their own data centers
and to migrate the majority of applications to the cloud.
The cloudification of Deutsche Bahn was supported by a comprehensive transformation of its digital partner DB Systel
from traditional working and organisational structures to self-organisation and company-wide networks,
including a DevOps culture. Within this context, the first Kubernetes platform services emerge.
From an OpenShift-based Kubernetes-Namespace-as-a-Service into a GitOps based K8s fleet management,
we describe how the cloud, the organisational transformation
and the CNCF landscape are accelerating the digitalisation of Deutsche Bahn.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;video-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://www.youtube-nocookie.com/embed/cT_xAsBSIpU?si=ripHEbkddB1YR7YC&quot; title=&quot;YouTube video player&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Produkt- statt Projektmanagement</title>
      <link>http://jbake.org/blog/2022/2022-11-04-Produkt-statt-Projekmanagement.html</link>
      <pubDate>Fri, 4 Nov 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/2022-11-04-Produkt-statt-Projekmanagement.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_produkt_statt_projektmanagement&quot;&gt;Produkt- statt Projektmanagement&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_produkt_statt_projektmanagement&quot;&gt;Produkt- statt Projektmanagement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Warum das Funding von Projekten mittlerweile zu einem der größten Hindernisse
auf dem Weg zu einer BizDevOps-Organisation geworden ist −
ein Debattenbeitrag zum nächsten notwendigen Schritt der DevOps-Bewegung.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die DevOps-Bewegung ist in der Realität und im Herzen der digitalen Industrie angekommen.
In der Systel arbeiten knapp 100 Teams nach dem Prinzip „Your build (or integrate) it, you run it“ und
sind so in der Lage, regelmäßig und mit hoher Frequenz Änderungen und
damit „Business Value“ zu den Nutzerinnen und Nutzern zu bringen.
Nicht nur bei uns, sondern in allen vergleichbaren großen Konzernen sind Cloud-Nutzung, Automatisierung, Continuous Delivery, Platform Strategy und
der dafür notwendige kulturelle Wandel auf der Tagesordnung.
Ein großer Hebel für den Wandel zu einer DevOps-Organisation wird allerdings häufig übersehen:
das etablierte Funding von digitalen Maßnahmen über Projekte ist mittlerweile zu einem der Haupt-Hindernisse
auf dem Weg zu einer leistungsfähigen Delivery-Organisation geworden.
Aus meiner Sicht müssen wir daher ganz vorne mit der Veränderung ansetzen, nämlich dort, wo Projekte entstehen, und
über Projektbudgets entschieden wird.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Warum ich dieser Meinung bin, habe ich auf einem Vortrag beim DevOps Enterprise Summit dargelegt,
der mittlerweile auch über den YouTube Kanal der DB Systel zugänglich ist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; width: 100%; height: auto;&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/GjW4YeFjXUM?si=orqR9ChC_pWBnKij&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Deine Diagramme sind Legende?</title>
      <link>http://jbake.org/blog/2022/2022-10-21-Deine-Diagramme-sind-Legende.html</link>
      <pubDate>Fri, 21 Oct 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/2022-10-21-Deine-Diagramme-sind-Legende.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_deine_plantuml_diagramme_sind_legende&quot;&gt;Deine PlantUML-Diagramme sind Legende?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;style&gt;
pre { white-space: pre-wrap; }
table.tableblock { overflow: auto; width: 100%;}
td.tableblock {overflow: auto; width: 50%;}
&lt;/style&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_deine_plantuml_diagramme_sind_legende&quot;&gt;Deine PlantUML-Diagramme sind Legende?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;dann verpasse ihnen eine Legende! Ein Diagramm soll nicht nur für Insider lesbar sein. Mit einer Legende erklärst du die verwendeten Symbole und Farben. In diesem Artikel zeige ich dir, wie es geht.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;PlantUML verfügt über ein wenig dokumentiertes Element namens &quot;&lt;a href=&quot;https://plantuml.com/de/commons#3b05da228ffe6d52&quot;&gt;Legend&lt;/a&gt;&quot;. Damit lässt sich eine Box im Diagramm z. B. in der rechten unteren Ecke platzieren. Wie aber der Inhalt dargestellt werden soll ist unklar.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;plantuml&quot;&gt;@startuml
skinparam actorStyle awesome

database Datenbank
:User: -&amp;gt; [Komponente]
[Komponente] -&amp;gt; Datenbank #green

legend right
   &amp;lt;b&amp;gt;Legende&amp;lt;/b&amp;gt;
   ???
endlegend
@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;//images/diag-f9c1a40657c8f5bf22f6862687071035.png&quot; alt=&quot;diag f9c1a40657c8f5bf22f6862687071035&quot; width=&quot;374&quot; height=&quot;161&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google findet als Idee, dass die Legende als &lt;a href=&quot;https://plantuml.com/de/creole#51c45b795d5d18a3&quot;&gt;Tabelle in Creole-Syntax&lt;/a&gt; erstellt werden kann. Farben kann man damit gut erklären, aber für Symbole können nur Emojis oder spezielle Zeichen verwendet werden.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;plantuml&quot;&gt;@startuml
skinparam actorStyle awesome

database Datenbank
:User: -&amp;gt; [Komponente]
[Komponente] -&amp;gt; Datenbank #green

legend right
   &amp;lt;b&amp;gt;Legende&amp;lt;/b&amp;gt;
   | &amp;lt;#red&amp;gt;    | Benutzer-Zugriff |
   | &amp;lt;#green&amp;gt;  | Datenbank-Verbindung |
   | &amp;lt;:smiley:&amp;gt; | Benutzer :-) |
endlegend
@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;//images/diag-c3a8ead5c9df4992e1c834a5128bd7d6.png&quot; alt=&quot;diag c3a8ead5c9df4992e1c834a5128bd7d6&quot; width=&quot;374&quot; height=&quot;204&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In einem &lt;a href=&quot;https://forum.plantuml.net/11603/how-to-add-arrows-to-a-legend-or-a-table?show=15179#a15179&quot;&gt;Forum&lt;/a&gt; habe ich am Rande den Hinweis gefunden, dass man mit dem &lt;a href=&quot;https://plantuml.com/de/object-diagram#6c738a9019f7ac08&quot;&gt;Map-Statement&lt;/a&gt; des Objektdiagramms auch eine Tabelle aufbauen kann. Nur geht das nicht direkt innerhalb der Legende. Es gibt aber den Trick, dass man mit der `{{ &amp;#8230;&amp;#8203; }} Syntax ein neues Diagramm innerhalb des Diagramms erstellen kann. Damit lässt sich dann auch eine Map innerhalb der Legende aufbauen.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;plantuml&quot;&gt;@startuml
skinparam actorStyle awesome

database Datenbank
:User: -&amp;gt; [Komponente]
[Komponente] -&amp;gt; Datenbank #green

legend right
{{
   map &quot;&amp;lt;b&amp;gt;Legende&amp;lt;/b&amp;gt;&quot; as legend #white {
   &amp;lt;#red&amp;gt;    =&amp;gt; Benutzer-Zugriff
   &amp;lt;#green&amp;gt;  =&amp;gt; Datenbank-Verbindung
   &amp;lt;:smiley:&amp;gt; =&amp;gt; Benutzer :-)
   }
}}
endlegend
@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;//images/diag-238f8b73f33f13606ea63993a15e9fad.png&quot; alt=&quot;diag 238f8b73f33f13606ea63993a15e9fad&quot; width=&quot;374&quot; height=&quot;233&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und wenn wir jetzt schon dabei sind Diagramme innerhalb von Diagrammen zu nutzen, dann können wir das auch noch eine Ebene tiefer machen. Dadurch schaffen wir es in der Legende die Diagramm-Elemente zu zeichnen, die wir beschreiben wollen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dazu bauen wir uns in einer Prozedur ein universelles Mini-Diagramm:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;plantUML&quot;&gt;scale $scale
skinparam backgroundcolor transparent
label &quot; &quot; as A
label &quot; &quot; as B
$type&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der scale-Befehl erlaubt es die zu beschreibende Komponente kleiner darzustellen und somit die Legende kompakt zu halten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die beiden unsichtbaren Labels sorgen dafür, dass wir einen Connector von A nach B darstellen können.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das ganze sieht dann kompakt wie folgt aus:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;plantuml&quot;&gt;@startuml
skinparam actorStyle awesome

database Datenbank
:User: -&amp;gt; [Komponente]
[Komponente] -&amp;gt; Datenbank #green

legend right
{{

   !procedure $entry($type, $label, $scale=1)
      {{\nscale $scale \nskinparam backgroundcolor transparent\nlabel &quot; &quot; as A\nlabel &quot; &quot; as B\n $type \n}} =&amp;gt; $label
   !endprocedure
   map &quot;&amp;lt;b&amp;gt;Legende&amp;lt;/b&amp;gt;&quot; as legend #white {
      $entry(&quot;:Actor:&quot;,&quot; Benutzer&quot;, 0.5)
      $entry(&quot;[component]&quot;,&quot; Benutzer&quot;, 0.7)
      $entry(&quot;database db&quot;,&quot;Datenbank&quot;, 0.7)
      $entry(&quot;A -&amp;gt; B&quot;,&quot;Benutzer-Zugriff&quot;)
      $entry(&quot;A -&amp;gt; B #green&quot;,&quot;Datenbank-Verbindung&quot;)
   }
}}
endlegend
@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;//images/diag-69a88801b07d3f3a5533fe729f017f52.png&quot; alt=&quot;diag 69a88801b07d3f3a5533fe729f017f52&quot; width=&quot;374&quot; height=&quot;358&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im letzten Schritt möchte ich die Legende mit ein paar Styles noch aufhübschen. Der doppelte Rahmen soll weg und etwas kleiner wäre auch nicht schlecht.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;plantuml&quot;&gt;@startuml
skinparam actorStyle awesome
skinparam legendBackgroundColor transparent
skinparam legendBorderColor transparent

database Datenbank
:User: -&amp;gt; [Komponente]
[Komponente] -&amp;gt; Datenbank #green


legend right
{{
   scale 0.8
   skinparam defaultFontSize 14
   skinparam BackGroundColor transparent
   skinparam defaultBackgroundColor white

   !procedure $entry($type, $label, $scale=1)
      {{\nscale $scale \nskinparam backgroundcolor transparent\nlabel &quot; &quot; as A\nlabel &quot; &quot; as B\n $type \n}} =&amp;gt; $label
   !endprocedure
   map &quot;&amp;lt;b&amp;gt;Legende&amp;lt;/b&amp;gt;&quot; as legend #white {
      $entry(&quot;:Actor: #green&quot;,&quot;\nBenutzer&quot;, 0.5)
      $entry(&quot;[component]&quot;,&quot;\nBenutzer&quot;, 0.7)
      $entry(&quot;database db&quot;,&quot;\nDatenbank&quot;, 0.7)
      $entry(&quot;A -&amp;gt; B&quot;,&quot;Benutzer-Zugriff&quot;)
      $entry(&quot;A -&amp;gt; B&quot;,&quot;Datenbank-Verbindung&quot;)
   }
}}

endlegend
@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;//images/diag-1893f34850155c3870866563e0efca44.png&quot; alt=&quot;diag 1893f34850155c3870866563e0efca44&quot; width=&quot;374&quot; height=&quot;310&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bei der Nutzung fällt schnell auf, dass die Legende zu viel Platz einnimmt. Sie duldet keine anderen Diagramm-Elemente neben sich. Also haben wir weiter geforscht. Mit dem Diagramm in der Legende besteht eigentlich kein Grund mehr wirklich das Element &lt;code&gt;Legend&lt;/code&gt; zu verwenden. Was passiert, wenn wir es durch eine &lt;code&gt;rectangle&lt;/code&gt; ersetzen und diese entsprechend Stylen?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dazu müssen wir dem Element einen Stereotype verpassen, da wir sonst alle &lt;code&gt;rectangle&lt;/code&gt;-Elemente stylen würden. Und siehe da, es funktioniert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Durch diesen Trick haben wir nun mehr Einfluss auf die Platzierung, denn wir können dieses &lt;code&gt;rectangle&lt;/code&gt;-Element durch versteckte Verbindungen beeinflussen.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;plantuml&quot;&gt;@startuml
skinparam actorStyle awesome

database Datenbank
:User: -&amp;gt; [Komponente]
[Komponente] -down-&amp;gt; Datenbank #green

rectangle a &amp;lt;&amp;lt;test&amp;gt;&amp;gt;
Datenbank -left-&amp;gt; a

skinparam rectangle&amp;lt;&amp;lt;legend&amp;gt;&amp;gt; {
    backgroundColor transparent
    borderColor transparent
    shadowing false
}
hide &amp;lt;&amp;lt;legend&amp;gt;&amp;gt; stereotype

rectangle legende &amp;lt;&amp;lt;legend&amp;gt;&amp;gt; [
{{
   scale 0.8
   skinparam defaultFontSize 14
   skinparam BackGroundColor transparent
   skinparam defaultBackgroundColor white

   !procedure $entry($type, $label, $scale=1)
      {{\nscale $scale \nskinparam backgroundcolor transparent\nlabel &quot; &quot; as A\nlabel &quot; &quot; as B\n $type \n}} =&amp;gt; $label
   !endprocedure
   map &quot;&amp;lt;b&amp;gt;Legende&amp;lt;/b&amp;gt;&quot; as legend #white {
      $entry(&quot;:Actor:&quot;,&quot;\nBenutzer&quot;, 0.5)
      $entry(&quot;[component]&quot;,&quot;\nBenutzer&quot;, 0.7)
      $entry(&quot;database db&quot;,&quot;\nDatenbank&quot;, 0.7)
      $entry(&quot;A -&amp;gt; B&quot;,&quot;Benutzer-Zugriff&quot;)
      $entry(&quot;A -&amp;gt; B #green&quot;,&quot;Datenbank-Verbindung&quot;)
   }
}}
]

User -[hidden]-&amp;gt; legende
legende -[hidden]down-&amp;gt; a

@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;//images/diag-138a71d715ccc25cdd84d12ec5d921a2.png&quot; alt=&quot;diag 138a71d715ccc25cdd84d12ec5d921a2&quot; width=&quot;431&quot; height=&quot;472&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Übrigens: PlantUML möchte Elemente und ihre Verbindungen immer optimiert platzieren. Es kann also sein, dass die neue Legende deshalb noch mal kräftig durchmischt. Es gibt aber nicht nur die Pfeildefinition &lt;code&gt;-[hidden]&amp;#8594;&lt;/code&gt;, um eine Verbindung nicht anzuzeigen. Der Pfeil &lt;code&gt;-[norank]&amp;#8594;&lt;/code&gt; ist eine Verbindung, welche bei besagter Optimierung ignoriert wird. Beide Features kann man kombinieren: Mit einem &lt;code&gt;-[norank,hidden]&amp;#8594;&lt;/code&gt; ist die Legende unsichtbar mit einem anderen Element verbunden, ohne dass dies das Diagramm umstrukturiert.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Vielfalt bei der Bahn</title>
      <link>http://jbake.org/blog/2022/2022-03-23-Vielfalt-bei-der-Bahn-Computerlinguistinnen-treiben-Digitalisierung-voran.html</link>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2022/2022-03-23-Vielfalt-bei-der-Bahn-Computerlinguistinnen-treiben-Digitalisierung-voran.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_vielfalt_bei_der_bahn_computerlinguistinnen_treiben_digitalisierung_voran&quot;&gt;Vielfalt bei der Bahn: Computerlinguist:innen treiben Digitalisierung voran&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vielfalt_bei_der_bahn_computerlinguistinnen_treiben_digitalisierung_voran&quot;&gt;Vielfalt bei der Bahn: Computerlinguist:innen treiben Digitalisierung voran&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dieses Mal haben wir Claudia Schönfelder aus dem Team SALT zu Gast, mit der wir über das Thema “SINUS”,
den Sprachassistenten für die Instandhaltung von Zügen,
und den Beruf der Computerlinguist:innen, sprechen.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Claudia entwickelt multidisziplinär mit mehreren Teams von Expert:innen einen der ersten Sprachassistenten
für die industrielle Nutzung. Wir alle kennen Siri und Alexa, aber diese bewältigen in der Regel Aufgaben des Alltags.
Im Gegensatz dazu führt SINUS die Konzernpartner:innen aus der Instandhaltung per Sprache durch digitalisierte Formulare,
um die Eingabe von Schäden an Loks gänzlich über die Spracherkennung zu tätigen.
Im Interview spricht sie mit uns über dieses ehrgeizige Projekt,
das die Effizienz bei der Befundung von Zügen deutlich steigern kann.
Wir spielen anhand eines Beispiels durch, welche Besonderheiten dieses Tool bei der Befundung besitzt.
Dazu erklärt Claudia wie sich das Berufsbild der Computerlinguisten in den letzten Jahren entwickelt und
etabliert hat. Information, die auch für die jüngeren unter uns, von großem Interesse sein kann.  &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;video-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://www.youtube-nocookie.com/embed/_fy8SD1XXLE?si=ulYO3N77YYdOYE0L&quot; title=&quot;YouTube video player&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>KITT Tool</title>
      <link>http://jbake.org/blog/2021/2021-11-02-KITT-das-Kuenstliche-Intelligenz-Translation-Tool.html</link>
      <pubDate>Tue, 2 Nov 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/2021-11-02-KITT-das-Kuenstliche-Intelligenz-Translation-Tool.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_kitt_das_künstliche_intelligenz_translation_tool&quot;&gt;KITT, das Künstliche Intelligenz Translation Tool&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_kitt_das_künstliche_intelligenz_translation_tool&quot;&gt;KITT, das Künstliche Intelligenz Translation Tool&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dieses Mal haben wir Pia Schwarz aus dem Team SALT zu Gast, mit der wir über das Thema “KITT”, das Künstliche Intelligenz Translation Tool, sprechen.
Pia bringt mit ihrem Team Maschinen das Sprechen bei.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im Interview spricht sie mit uns über KITT, das als Interface gesprochene Sprache entgegennimmt.
Es wird eingesetzt, um die Kommunikation im Zugfunk von Fahrdienstleiter:innen und
Triebfahrzeugführer:innen im Grenzbereich von Frankreich und Deutschland zu verbessern.
Wir spielen anhand eines Beispiels durch, welche Besonderheiten das Bahnjargon mit sich bringt und
warum am Markt verfügbare Übersetzungstool in diesem Anwendungsfall nicht ausreichend sind.
KITT hilft ebenso die Anforderungen an das Sprachniveau zu senken,
in dem es sogenannte Predefined Messages zuverlässig übersetzt, die im europäischen Bahnverkehr verwendet werden.
In der zweiten Hälfte des Interviews steigen wir tiefer in die Technik ein und
gehen auf die Herausforderungen ein. Denn die Anforderungen an KITT sind nicht weniger, als exakte Übersetzungen zu produzieren. Zum Beispiel sind Übersetzungen bei Hintergrundgeräuschen oder Sätze mit Eigennamen problematisch.
Zum Abschluss sprechen wir über die technische Umsetzung, Trainingsdatenmenge und Open Source Frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; width: 100%; height: auto;&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/c43j8igaVuk?si=NN_K09dVon4yBMGI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Bad Bots</title>
      <link>http://jbake.org/blog/2021/2021-06-08-Bad-bots-Chancen-und-Herausforderungen-fuer-KI-und-Sprache.html</link>
      <pubDate>Tue, 8 Jun 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/2021-06-08-Bad-bots-Chancen-und-Herausforderungen-fuer-KI-und-Sprache.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_bad_bots_chancen_und_herausforderungen_für_ki_und_sprache&quot;&gt;Bad Bots - Chancen und Herausforderungen für KI und Sprache&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bad_bots_chancen_und_herausforderungen_für_ki_und_sprache&quot;&gt;Bad Bots - Chancen und Herausforderungen für KI und Sprache&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sascha Wolter, Chief Advisor Conversational AI bei der DB Systel GmbH,
hielt diesen Vortrag am 06.05.2021 im Rahmen der Digital Office Conference 2021 von Bitkom.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kaum jemand scheint seine Alexa nach mehr als dem Wetter oder schlechten Witzen zu fragen.
Und vier der fünf erfolgreichsten Alexa Skills erzeugen nicht mehr als Pupsgeräusche.
Dies steht in einem krassen Widerspruch zu den Berichten über künstliche Intelligenz in den Medien,
denen zufolge weltbeherrschende Computer wie Skynet (Terminator) unmittelbar bevorstehen.
Und selbst die, die den technische Fortschritt weniger als Bedrohung denn als Chance verstehen,
haben oft eine völlig falsche Vorstellung von den Möglichkeiten von #Chatbots und #Sprachassistenten.
Nicht selten wird davon ausgegangen, dass – sofern man ausreichend Daten hat – die #KI alles automatisch erledigt
und sich der Erfolg mehr oder weniger von ganz allein einstellt.
Dies ist offensichtlich noch nicht so, wie die vielen schlechten Bots im Markt eindrucksvoll zeigen.
Doch wie man diesem Ziel zumindest möglichst nahe kommt, zeigt Sascha Wolter anhand zahlreicher praktischer Beispiele.
Er behandelt nicht nur die Hintergründe, sondern zeigt auch technische und gestalterische Lösungen. &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;video-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://www.youtube-nocookie.com/embed/aY4I565gdM8?si=gxWCjUIandt7jHp9&amp;t=29s&quot; title=&quot;Bad Bots - Chancen und Herausforderungen für KI und Sprache&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Computer Vision Use Cases</title>
      <link>http://jbake.org/blog/2021/2021-04-12-Computer-Vision-Use-Cases-at-Deutsche-Bahn.html</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/2021-04-12-Computer-Vision-Use-Cases-at-Deutsche-Bahn.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_computer_vision_use_cases_deutsche_bahn&quot;&gt;Computer Vision Use Cases @ Deutsche Bahn&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_computer_vision_use_cases_deutsche_bahn&quot;&gt;Computer Vision Use Cases @ Deutsche Bahn&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wie können KI-Bildanalysen bei der Graffiti-Erkennung helfen und welche Potentiale birgt das für die Bahn?&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im Rahmen des Data Festivals 2021 präsentierte das DB Systel Venture vsion.ai gemeinsam
mit der Data Science Beratung Alexander Thamm Einsatzmöglichkeiten von KI-Analysen auf Bildern im Bahnkontext.
Am Beispiel der automatischen Erkennung von Graffiti auf Zügen zeigt Peco Elenchevski die Besonderheiten des
Use Cases auf sowie die technische Umsetzung eines Proof of Concept.
Nico Becker knüpft dort an und beschreibt die Herausforderungen,
welche sich aus dem Deployment von KI-Modellen ergeben.
Dabei skizziert er einen Weg, wie sich ein Proof of Concept zu einem robusten Produktivsystem weiterentwickeln lässt.
Der Vortrag wurde vor internationalem Publikum gehalten und ist daher auf Englisch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;video-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://www.youtube-nocookie.com/embed/QaDLtFEPcNo?si=IAtuP3i4KY5kopOQ&quot; title=&quot;YouTube video player&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Die C4-Testpyramide</title>
      <link>http://jbake.org/blog/2021/2021-03-20-Die-C4-Testpyramide-eine-architekturgetriebene-Teststrategie.html</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2021/2021-03-20-Die-C4-Testpyramide-eine-architekturgetriebene-Teststrategie.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_die_c4_testpyramide_eine_architekturgetriebene_teststrategie&quot;&gt;Die C4-Testpyramide - eine architekturgetriebene Teststrategie&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_die_c4_testpyramide_eine_architekturgetriebene_teststrategie&quot;&gt;Die C4-Testpyramide - eine architekturgetriebene Teststrategie&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Präsentation zeigt, wie sich die Prinzipien der Test Pyramide mit dem C4 Modell zur Visualisierung von Software Architekturen verbinden lassen,
um so auf einfache Weise zu einer produktspezifischen Teststrategie zu gelangen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; width: 100%; height: auto;&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/I2UBsZAdap4?si=a-cOpaVov7LZAOf3&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>DevOps Geschwindigkeit</title>
      <link>http://jbake.org/blog/2020/2020-12-07-devops-mehr-geschwindigkeit-auf-der-schiene.html</link>
      <pubDate>Mon, 7 Dec 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/2020-12-07-devops-mehr-geschwindigkeit-auf-der-schiene.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_devops_mehr_geschwindigkeit_auf_der_schiene&quot;&gt;DevOps - Mehr Geschwindigkeit auf der Schiene&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides_und_video&quot;&gt;Slides und Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_devops_mehr_geschwindigkeit_auf_der_schiene&quot;&gt;DevOps - Mehr Geschwindigkeit auf der Schiene&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In diesem Vortrag im Rahmen der IT-Tage 2020 erklärt Carsten Hoffmann von der DB Systel,
warum sich der erste Ansatz einer zentralen CI/CD-Installation im Projekt,
eine Cloud-native Plattform für API-getriebene Softwareentwicklung aufzubauen,
für alle Teams als problematisch erwies und durch dezentrale Pipelines ersetzt wurde.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Danach werden die Hindernisse bei der Einführung einer eingekauften API-Management-Lösung erklärt und
wieso sich der Einkauf von großer On-Premise-Software nur schwierig mit den agilen Prinzipien vereinbaren lässt.
Außerdem wird erläutert, wie im Team mit polyglotter Softwareentwicklung und permanent gegen Wissensinseln angekämpft wurde.
Zuletzt geht Casten Hoffmann darauf ein, wie das Team mit umfassender Architekturdokumentation begonnen hat und
gescheitert ist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides_und_video&quot;&gt;Slides und Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; width: 100%; height: auto;&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/jas5x0VREvY?si=NZwaDN1OjaWrQcTb&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;speakerdeck-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/da603672d6254bbeae775bb452660876&quot; title=&quot;DevOps - Mehr Geschwindigkeit auf der Schiene&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Vue.js vs. Angular</title>
      <link>http://jbake.org/blog/2020/2020-05-19-5vue-js-vs-angular-was-ist-besser.html</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/2020-05-19-5vue-js-vs-angular-was-ist-besser.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_vue_js_vs_angular_was_ist_besser&quot;&gt;Vue.js vs. Angular: Was ist besser?&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vue_js_vs_angular_was_ist_besser&quot;&gt;Vue.js vs. Angular: Was ist besser?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Heute zu Gast bei #000000 #c0ffee – Der Tech-Talk der DB Systel.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Von Techies für Techies: Danny Koppenhagen
Danny ist Frontend-Entwickler mit den Schwerpunkten Angular und
Vue.js und einer der Autoren des Buches
„Angular - Grundlagen, fortgeschrittene Themen und Best Practices“.
Im dx.house Berlin berät er außerdem Kunden und
Teams in den Themen User Experience von Enterprise-Lösungen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Er engagiert sich in der Web Community der DB Systel und
ist Mitglied im Themen Team Web der Architekturgilde.
Dort erarbeitet er Architektur-Standards für alle Themen Web.
Im Interview spricht er über seine Erfahrungen mit Vue.js und Angular.
Er geht darauf ein, welches Framework sich für welche Anwendungszwecke eignet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So bietet Vue.js hauptsächlich Vorteile,
wenn es um die Integration in bestehende Anwendungen handelt und
das Team gerne JavaScript einsetzt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Angular ist im Enterprise-Umfeld für neue Anwendungen interessant,
da es auf TypeScript aufsetzt, ein umfangreiches Ökosystem mitbringt und
zum Beispiel Migrationsguides und
Templating-Fähigkeiten über sogenannte Schematics mitbringt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Außerdem erläutert Danny wie der aktuelle Stand der Technik für Progressive Webapps (PWA) ist.
Hier kommt es darauf an, ob alle benötigten Features des Betriebssystems angesprochen werden können.
Falls nicht, sollte in Erwägung gezogen werden eine native App zu entwickeln.
Im dritten Teil sprechen wir über die Anbindung von APIs.
Um die Orchestrierung von APIs zu vereinfachen,
kann hier das Architekturmuster Backend For Frontends zum Einsatz kommen.
Das vereinfacht den Zugriff aus der Anwendung,
da die Anbindung der APIs nicht einzeln im Frontend implementiert werden muss.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; src=&quot;https://www.youtube-nocookie.com/embed/O3bYfZ8tcLc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>OOP: Guter Code</title>
      <link>http://jbake.org/blog/2020/2020-03-27-DB-Systel-streitet-auf-der-OOP-fuer-guten-Code.html</link>
      <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/2020-03-27-DB-Systel-streitet-auf-der-OOP-fuer-guten-Code.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_db_systel_streitet_auf_der_oop_für_guten_code&quot;&gt;DB Systel streitet auf der OOP für guten Code&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_db_systel_streitet_auf_der_oop_für_guten_code&quot;&gt;DB Systel streitet auf der OOP für guten Code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In diesem unterhaltsamen Pecha Kucha Vortrag spricht Carsten Thurau über seine Erfahrung aus dem Alltag als erfahrener Trainer und Coach.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Er zeigt in seinem Kurzvortrag, warum schlechter Code Entwickler unglücklich macht und
Code Reviews, TDD und Clean Code eine gute Idee sind.
Fazit: Entwickelt qualitativ hochwertigen Code und seid stolz auf Euer Werk!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Talk wurde auf der OOP 2020 Konferenz in München Anfang Februar 2020 aufgezeichnet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_video&quot;&gt;Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; width: 100%; height: auto;&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/ZDIjhsRU34w?si=aKWUSc-Se2COMlcA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>API first mit TS</title>
      <link>http://jbake.org/blog/2020/2020-03-14-API-first-mit-TypeScript.html</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2020/2020-03-14-API-first-mit-TypeScript.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_api_first_mit_typescript&quot;&gt;API first mit TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_api_first_mit_typescript&quot;&gt;API first mit TypeScript&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit API first kann man sehr schön REST APIs bauen. Verwendet man TypeScript, kann man mittels der Bibliothek &lt;code&gt;express-openapi&lt;/code&gt; nicht nur einmalig einmalig ein Interface generieren, sondern auch bei späteren Änderungen API first beibehalten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im Video zeige ich anhand eines praktischen Beispiels, wie man ein solches Projekt aufsetzt.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 6 Schritten setzen wir ein TypeScript Projekt mit express.js und express-openapi auf. Es bringt ein Swagger UI und Unit-Tests mit und lässt sich - natürlich ebenso API first wie am Anfang - leicht weiter entwickeln.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Commits im &lt;a href=&quot;https://github.com/jschirrmacher/api-first-with-typescript/commits/main/STEPS.md&quot;&gt;Repository&lt;/a&gt; erklären, wie man schrittweise einen solchen REST Service aufbaut.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Spock und AsciiDoc</title>
      <link>http://jbake.org/blog/2019/2019-09-13-Spock-und-AsciiDoc.html</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2019/2019-09-13-Spock-und-AsciiDoc.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_spock_und_asciidoc_vom_test_zur_spezifikation_und_zurück&quot;&gt;Spock und AsciiDoc - vom Test zur Spezifikation und zurück&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_slides_und_video&quot;&gt;Slides und Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- endtoc --&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_spock_und_asciidoc_vom_test_zur_spezifikation_und_zurück&quot;&gt;Spock und AsciiDoc - vom Test zur Spezifikation und zurück&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Spock ist ein Testframework für Webanwendungen, mit dem man unter anderem den Behavior Driven Development Ansatz, kurz BDD, verfolgen kann.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- teaser --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Product Owner beschreibt das Verhalten einer Applikation und der Entwickler überprüft es über einen automatischen Test.
Dem Entwickler reicht die Ausgabe &quot;PASSED&quot; oder &quot;FAILED&quot;, denn er kennt ja den Code seiner Tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wäre es nicht cool, wenn auch der Product Owner ein verständliches Dokument bekäme?
Kein Problem!
Wir generieren über ein Template einfach einen Test-Report in AsciiDoc und fügen weitere erklärende Texte hinzu um eine les- und ausführbare Spezifikation zu erhalten.
Screenshots aller wichtigen Schritte bereichern die Spezifikation weiter.
Sollte aber die Spezifikation nicht am Anfang stehen?
Und warum Spezifikation, wenn wir agil sein wollen? Richtig!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stellen wir also eine iterative Feature-Beschreibung an den Anfang und
verfeinern diese mit automatischen Tests um am Ende eine gut lesbare und verifizierbare Spezifikation des Verhaltens unseres Systems zu erhalten!
Die Vorteile liegen auf der Hand – die Vorgehensweise verbessert die Kommunikation zwischen Product Owner und Entwicklern und
am Ende bekommen wir ein Dokument welches Ihre wertvolle Software korrekt und überprüfbar beschreibt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_slides_und_video&quot;&gt;Slides und Video&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe class=&quot;speakerdeck-iframe&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/1ac034287b8d429d8e0dde25de0f6a66&quot; title=&quot;Spock and AsciiDoc - ein perfektes Paar&quot; allowfullscreen=&quot;true&quot; style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px;  width: 100%; height: auto; aspect-ratio: 560 / 315;&quot; data-ratio=&quot;1.7777777777777777&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;iframe style=&quot;border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; width: 100%; height: auto;&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/ebc6Xa-HC48?si=vB62D8FhCpI9UGH3&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    

  </channel> 
</rss>
